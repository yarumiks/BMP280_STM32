
BMP280_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004bcc  08004bcc  00005bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c0c  08004c0c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c0c  08004c0c  00005c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c14  08004c14  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c14  08004c14  00005c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c18  08004c18  00005c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004c1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000010  08004c28  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004c28  0000618c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101c6  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f0  00000000  00000000  00016202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  000182f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009df  00000000  00000000  00018fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a76  00000000  00000000  00019987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c58  00000000  00000000  0003e3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8c17  00000000  00000000  0004f055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003558  00000000  00000000  00137cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0013b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004bb4 	.word	0x08004bb4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004bb4 	.word	0x08004bb4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	bmp280_parameters bmp_params;
	bmp_params.hi2cX = &hi2c1;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <main+0x58>)
 8000d4c:	60fb      	str	r3, [r7, #12]
	bmp_params.oversamplingT = OSRS_16;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	713b      	strb	r3, [r7, #4]
	bmp_params.oversamplingP = OSRS_16;
 8000d52:	2301      	movs	r3, #1
 8000d54:	717b      	strb	r3, [r7, #5]
	bmp_params.mode = normal_mode;
 8000d56:	2303      	movs	r3, #3
 8000d58:	71bb      	strb	r3, [r7, #6]
	bmp_params.tstandby = t_sb4;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	727b      	strb	r3, [r7, #9]
	bmp_params.filter = fc4;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	71fb      	strb	r3, [r7, #7]
	bmp_params.spiEn = 0x00;
 8000d62:	2300      	movs	r3, #0
 8000d64:	723b      	strb	r3, [r7, #8]
	bmp_params.modeMeasure = BOTH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	72bb      	strb	r3, [r7, #10]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*	/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6a:	f000 fed7 	bl	8001b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6e:	f000 f81b 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d72:	f000 f8ed 	bl	8000f50 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d76:	f000 f8a1 	bl	8000ebc <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000d7a:	f000 f85f 	bl	8000e3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&bmp_params);
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 fe65 	bl	8001a50 <BMP280_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CalculationStart(&temp, &pres, &bmp_params);
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4905      	ldr	r1, [pc, #20]	@ (8000da0 <main+0x5c>)
 8000d8c:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <main+0x60>)
 8000d8e:	f000 fe97 	bl	8001ac0 <CalculationStart>
	  HAL_Delay(200);
 8000d92:	20c8      	movs	r0, #200	@ 0xc8
 8000d94:	f000 ff32 	bl	8001bfc <HAL_Delay>
	  CalculationStart(&temp, &pres, &bmp_params);
 8000d98:	bf00      	nop
 8000d9a:	e7f4      	b.n	8000d86 <main+0x42>
 8000d9c:	2000002c 	.word	0x2000002c
 8000da0:	20000118 	.word	0x20000118
 8000da4:	20000114 	.word	0x20000114

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b094      	sub	sp, #80	@ 0x50
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	2238      	movs	r2, #56	@ 0x38
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fed0 	bl	8004b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f002 f828 	bl	8002e20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dd8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dde:	2303      	movs	r3, #3
 8000de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000de2:	2302      	movs	r3, #2
 8000de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 8000de6:	231c      	movs	r3, #28
 8000de8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 f8c4 	bl	8002f88 <HAL_RCC_OscConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000e06:	f000 f911 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2104      	movs	r1, #4
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fbc2 	bl	80035ac <HAL_RCC_ClockConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e2e:	f000 f8fd 	bl	800102c <Error_Handler>
  }
}
 8000e32:	bf00      	nop
 8000e34:	3750      	adds	r7, #80	@ 0x50
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e42:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb4 <MX_I2C1_Init+0x78>)
 8000e44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20501E65;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e48:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <MX_I2C1_Init+0x7c>)
 8000e4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e52:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e76:	480e      	ldr	r0, [pc, #56]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e78:	f001 f9af 	bl	80021da <HAL_I2C_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e82:	f000 f8d3 	bl	800102c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e86:	2100      	movs	r1, #0
 8000e88:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e8a:	f001 ff31 	bl	8002cf0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e94:	f000 f8ca 	bl	800102c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_I2C1_Init+0x74>)
 8000e9c:	f001 ff73 	bl	8002d86 <HAL_I2CEx_ConfigDigitalFilter>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ea6:	f000 f8c1 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000002c 	.word	0x2000002c
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	20501e65 	.word	0x20501e65

08000ebc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ec0:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000ec2:	4a22      	ldr	r2, [pc, #136]	@ (8000f4c <MX_LPUART1_UART_Init+0x90>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ec6:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ecc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000efe:	4812      	ldr	r0, [pc, #72]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000f00:	f002 ffbe 	bl	8003e80 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f0a:	f000 f88f 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000f12:	f003 fd59 	bl	80049c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f1c:	f000 f886 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000f24:	f003 fd8e 	bl	8004a44 <HAL_UARTEx_SetRxFifoThreshold>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f2e:	f000 f87d 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_LPUART1_UART_Init+0x8c>)
 8000f34:	f003 fd0f 	bl	8004956 <HAL_UARTEx_DisableFifoMode>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f3e:	f000 f875 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000080 	.word	0x20000080
 8000f4c:	40008000 	.word	0x40008000

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b2f      	ldr	r3, [pc, #188]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f72:	4b2c      	ldr	r3, [pc, #176]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7e:	4b29      	ldr	r3, [pc, #164]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	4a28      	ldr	r2, [pc, #160]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8a:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f003 0320 	and.w	r3, r3, #32
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b23      	ldr	r3, [pc, #140]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a22      	ldr	r2, [pc, #136]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b20      	ldr	r3, [pc, #128]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	4b1d      	ldr	r3, [pc, #116]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fba:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2120      	movs	r1, #32
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fce:	f001 f8c9 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480f      	ldr	r0, [pc, #60]	@ (8001028 <MX_GPIO_Init+0xd8>)
 8000fea:	f000 ff39 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fee:	2320      	movs	r3, #32
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001008:	f000 ff2a 	bl	8001e60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	2028      	movs	r0, #40	@ 0x28
 8001012:	f000 fef0 	bl	8001df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001016:	2028      	movs	r0, #40	@ 0x28
 8001018:	f000 ff07 	bl	8001e2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	@ 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000
 8001028:	48000800 	.word	0x48000800

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <Error_Handler+0x8>

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <HAL_MspInit+0x44>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001042:	4a0e      	ldr	r2, [pc, #56]	@ (800107c <HAL_MspInit+0x44>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6613      	str	r3, [r2, #96]	@ 0x60
 800104a:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <HAL_MspInit+0x44>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <HAL_MspInit+0x44>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_MspInit+0x44>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001060:	6593      	str	r3, [r2, #88]	@ 0x58
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_MspInit+0x44>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800106e:	f001 ff7b 	bl	8002f68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0a0      	sub	sp, #128	@ 0x80
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2254      	movs	r2, #84	@ 0x54
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fd5b 	bl	8004b5c <memset>
  if(hi2c->Instance==I2C1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001160 <HAL_I2C_MspInit+0xe0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d153      	bne.n	8001158 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010b0:	2340      	movs	r3, #64	@ 0x40
 80010b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b8:	f107 0318 	add.w	r3, r7, #24
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 fc91 	bl	80039e4 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010c8:	f7ff ffb0 	bl	800102c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <HAL_I2C_MspInit+0xe4>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d0:	4a24      	ldr	r2, [pc, #144]	@ (8001164 <HAL_I2C_MspInit+0xe4>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d8:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <HAL_I2C_MspInit+0xe4>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <HAL_I2C_MspInit+0xe4>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001164 <HAL_I2C_MspInit+0xe4>)
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001164 <HAL_I2C_MspInit+0xe4>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001100:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001102:	2312      	movs	r3, #18
 8001104:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110e:	2304      	movs	r3, #4
 8001110:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111c:	f000 fea0 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001124:	2312      	movs	r3, #18
 8001126:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001130:	2304      	movs	r3, #4
 8001132:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001138:	4619      	mov	r1, r3
 800113a:	480b      	ldr	r0, [pc, #44]	@ (8001168 <HAL_I2C_MspInit+0xe8>)
 800113c:	f000 fe90 	bl	8001e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <HAL_I2C_MspInit+0xe4>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001144:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <HAL_I2C_MspInit+0xe4>)
 8001146:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800114a:	6593      	str	r3, [r2, #88]	@ 0x58
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_I2C_MspInit+0xe4>)
 800114e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3780      	adds	r7, #128	@ 0x80
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40005400 	.word	0x40005400
 8001164:	40021000 	.word	0x40021000
 8001168:	48000400 	.word	0x48000400

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b09e      	sub	sp, #120	@ 0x78
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2254      	movs	r2, #84	@ 0x54
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f003 fce5 	bl	8004b5c <memset>
  if(huart->Instance==LPUART1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1f      	ldr	r2, [pc, #124]	@ (8001214 <HAL_UART_MspInit+0xa8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d136      	bne.n	800120a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800119c:	2320      	movs	r3, #32
 800119e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fc1b 	bl	80039e4 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011b4:	f7ff ff3a 	bl	800102c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <HAL_UART_MspInit+0xac>)
 80011ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011bc:	4a16      	ldr	r2, [pc, #88]	@ (8001218 <HAL_UART_MspInit+0xac>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <HAL_UART_MspInit+0xac>)
 80011c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_UART_MspInit+0xac>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d4:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <HAL_UART_MspInit+0xac>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <HAL_UART_MspInit+0xac>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80011e8:	230c      	movs	r3, #12
 80011ea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011f8:	230c      	movs	r3, #12
 80011fa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001206:	f000 fe2b 	bl	8001e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	3778      	adds	r7, #120	@ 0x78
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40008000 	.word	0x40008000
 8001218:	40021000 	.word	0x40021000

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <NMI_Handler+0x4>

08001224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <MemManage_Handler+0x4>

08001234 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <UsageFault_Handler+0x4>

08001244 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001272:	f000 fca5 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}

0800127a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800127e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001282:	f000 ff87 	bl	8002194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b0:	480d      	ldr	r0, [pc, #52]	@ (80012e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b4:	f7ff ffea 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	@ (80012ec <LoopForever+0x6>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	@ (80012f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <LoopForever+0xe>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	@ (80012fc <LoopForever+0x16>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012de:	f003 fc45 	bl	8004b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e2:	f7ff fd2f 	bl	8000d44 <main>

080012e6 <LoopForever>:

LoopForever:
    b LoopForever
 80012e6:	e7fe      	b.n	80012e6 <LoopForever>
  ldr   r0, =_estack
 80012e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012f4:	08004c1c 	.word	0x08004c1c
  ldr r2, =_sbss
 80012f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012fc:	2000018c 	.word	0x2000018c

08001300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_2_IRQHandler>

08001302 <BMP280_WriteRegister>:
	uint8_t readData;
	HAL_I2C_Mem_Read(params->hi2cX, BMP280_READ_ADDR, dataAddr, 1, &readData, 1, 100);
	return readData;
};

void BMP280_WriteRegister(bmp280_parameters* params,uint8_t dataAddr,uint8_t data){
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af04      	add	r7, sp, #16
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
 800130e:	4613      	mov	r3, r2
 8001310:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(params->hi2cX, BMP280_READ_ADDR, dataAddr, 1, &data, 1, 100);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6898      	ldr	r0, [r3, #8]
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	b29a      	uxth	r2, r3
 800131a:	2364      	movs	r3, #100	@ 0x64
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	1cbb      	adds	r3, r7, #2
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	21ed      	movs	r1, #237	@ 0xed
 800132a:	f000 fff1 	bl	8002310 <HAL_I2C_Mem_Write>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <BMP280_Calibration>:
void BMP280_Calibration(bmp280_parameters* params){
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	@ 0x30
 800133c:	af04      	add	r7, sp, #16
 800133e:	6078      	str	r0, [r7, #4]
	uint8_t calibrationData[24] = {0};
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
	HAL_I2C_Mem_Read(params->hi2cX, BMP280_READ_ADDR, CALIBRATION_DATA_ADDR, 1, calibrationData, 24, 1000);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6898      	ldr	r0, [r3, #8]
 8001358:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	2318      	movs	r3, #24
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	2288      	movs	r2, #136	@ 0x88
 800136c:	21ed      	movs	r1, #237	@ 0xed
 800136e:	f001 f8e3 	bl	8002538 <HAL_I2C_Mem_Read>

	dig_T1 = (calibrationData[1] << 8 | calibrationData[0]);
 8001372:	7a7b      	ldrb	r3, [r7, #9]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	b21a      	sxth	r2, r3
 8001378:	7a3b      	ldrb	r3, [r7, #8]
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b35      	ldr	r3, [pc, #212]	@ (8001458 <BMP280_Calibration+0x120>)
 8001384:	801a      	strh	r2, [r3, #0]
	dig_T2 = (calibrationData[3] << 8 | calibrationData[2]);
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b21a      	sxth	r2, r3
 800138c:	7abb      	ldrb	r3, [r7, #10]
 800138e:	b21b      	sxth	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b21a      	sxth	r2, r3
 8001394:	4b31      	ldr	r3, [pc, #196]	@ (800145c <BMP280_Calibration+0x124>)
 8001396:	801a      	strh	r2, [r3, #0]
	dig_T3 = (calibrationData[5] << 8 | calibrationData[4]);
 8001398:	7b7b      	ldrb	r3, [r7, #13]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	b21a      	sxth	r2, r3
 800139e:	7b3b      	ldrb	r3, [r7, #12]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001460 <BMP280_Calibration+0x128>)
 80013a8:	801a      	strh	r2, [r3, #0]
	dig_P1 = (calibrationData[7] << 8 | calibrationData[6]);
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001464 <BMP280_Calibration+0x12c>)
 80013bc:	801a      	strh	r2, [r3, #0]
	dig_P2 = (calibrationData[9] << 8 | calibrationData[8]);
 80013be:	7c7b      	ldrb	r3, [r7, #17]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	7c3b      	ldrb	r3, [r7, #16]
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <BMP280_Calibration+0x130>)
 80013ce:	801a      	strh	r2, [r3, #0]
	dig_P3 = (calibrationData[11] << 8 | calibrationData[10]);
 80013d0:	7cfb      	ldrb	r3, [r7, #19]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	7cbb      	ldrb	r3, [r7, #18]
 80013d8:	b21b      	sxth	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	b21a      	sxth	r2, r3
 80013de:	4b23      	ldr	r3, [pc, #140]	@ (800146c <BMP280_Calibration+0x134>)
 80013e0:	801a      	strh	r2, [r3, #0]
	dig_P4 = (calibrationData[13] << 8 | calibrationData[12]);
 80013e2:	7d7b      	ldrb	r3, [r7, #21]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7d3b      	ldrb	r3, [r7, #20]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21a      	sxth	r2, r3
 80013f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <BMP280_Calibration+0x138>)
 80013f2:	801a      	strh	r2, [r3, #0]
	dig_P5 = (calibrationData[15] << 8 | calibrationData[14]);
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	7dbb      	ldrb	r3, [r7, #22]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <BMP280_Calibration+0x13c>)
 8001404:	801a      	strh	r2, [r3, #0]
	dig_P6 = (calibrationData[17] << 8 | calibrationData[16]);
 8001406:	7e7b      	ldrb	r3, [r7, #25]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	7e3b      	ldrb	r3, [r7, #24]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <BMP280_Calibration+0x140>)
 8001416:	801a      	strh	r2, [r3, #0]
	dig_P7 = (calibrationData[19] << 8 | calibrationData[18]);
 8001418:	7efb      	ldrb	r3, [r7, #27]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	7ebb      	ldrb	r3, [r7, #26]
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b21a      	sxth	r2, r3
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <BMP280_Calibration+0x144>)
 8001428:	801a      	strh	r2, [r3, #0]
	dig_P8 = (calibrationData[21] << 8 | calibrationData[20]);
 800142a:	7f7b      	ldrb	r3, [r7, #29]
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	b21a      	sxth	r2, r3
 8001430:	7f3b      	ldrb	r3, [r7, #28]
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21a      	sxth	r2, r3
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <BMP280_Calibration+0x148>)
 800143a:	801a      	strh	r2, [r3, #0]
	dig_P9 = (calibrationData[23] << 8 | calibrationData[22]);
 800143c:	7ffb      	ldrb	r3, [r7, #31]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	7fbb      	ldrb	r3, [r7, #30]
 8001444:	b21b      	sxth	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <BMP280_Calibration+0x14c>)
 800144c:	801a      	strh	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000011c 	.word	0x2000011c
 800145c:	2000011e 	.word	0x2000011e
 8001460:	20000120 	.word	0x20000120
 8001464:	20000122 	.word	0x20000122
 8001468:	20000124 	.word	0x20000124
 800146c:	20000126 	.word	0x20000126
 8001470:	20000128 	.word	0x20000128
 8001474:	2000012a 	.word	0x2000012a
 8001478:	2000012c 	.word	0x2000012c
 800147c:	2000012e 	.word	0x2000012e
 8001480:	20000130 	.word	0x20000130
 8001484:	20000132 	.word	0x20000132

08001488 <bmp280_getTemprature>:


void bmp280_getTemprature(void){
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	af00      	add	r7, sp, #0

	tvar1 = (((double)temperatureRaw /16384.0) - ((double)dig_T1/1024.0))*(double)dig_T2;
 800148c:	4b5c      	ldr	r3, [pc, #368]	@ (8001600 <bmp280_getTemprature+0x178>)
 800148e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	4b5b      	ldr	r3, [pc, #364]	@ (8001604 <bmp280_getTemprature+0x17c>)
 8001498:	f7ff f9a4 	bl	80007e4 <__aeabi_ddiv>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4614      	mov	r4, r2
 80014a2:	461d      	mov	r5, r3
 80014a4:	4b58      	ldr	r3, [pc, #352]	@ (8001608 <bmp280_getTemprature+0x180>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe fff7 	bl	800049c <__aeabi_ui2d>
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	4b56      	ldr	r3, [pc, #344]	@ (800160c <bmp280_getTemprature+0x184>)
 80014b4:	f7ff f996 	bl	80007e4 <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4620      	mov	r0, r4
 80014be:	4629      	mov	r1, r5
 80014c0:	f7fe feae 	bl	8000220 <__aeabi_dsub>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4614      	mov	r4, r2
 80014ca:	461d      	mov	r5, r3
 80014cc:	4b50      	ldr	r3, [pc, #320]	@ (8001610 <bmp280_getTemprature+0x188>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe fff2 	bl	80004bc <__aeabi_i2d>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4620      	mov	r0, r4
 80014de:	4629      	mov	r1, r5
 80014e0:	f7ff f856 	bl	8000590 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	494a      	ldr	r1, [pc, #296]	@ (8001614 <bmp280_getTemprature+0x18c>)
 80014ea:	e9c1 2300 	strd	r2, r3, [r1]
	tvar2 = ((((double)temperatureRaw /131072.0) - ((double)dig_T1/8192.0))* ((double)temperatureRaw/131072.0) - (double)dig_T1/8192.0) * (double)dig_T3;
 80014ee:	4b44      	ldr	r3, [pc, #272]	@ (8001600 <bmp280_getTemprature+0x178>)
 80014f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80014fc:	f7ff f972 	bl	80007e4 <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4614      	mov	r4, r2
 8001506:	461d      	mov	r5, r3
 8001508:	4b3f      	ldr	r3, [pc, #252]	@ (8001608 <bmp280_getTemprature+0x180>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe ffc5 	bl	800049c <__aeabi_ui2d>
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b40      	ldr	r3, [pc, #256]	@ (8001618 <bmp280_getTemprature+0x190>)
 8001518:	f7ff f964 	bl	80007e4 <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4620      	mov	r0, r4
 8001522:	4629      	mov	r1, r5
 8001524:	f7fe fe7c 	bl	8000220 <__aeabi_dsub>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4614      	mov	r4, r2
 800152e:	461d      	mov	r5, r3
 8001530:	4b33      	ldr	r3, [pc, #204]	@ (8001600 <bmp280_getTemprature+0x178>)
 8001532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800153e:	f7ff f951 	bl	80007e4 <__aeabi_ddiv>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4620      	mov	r0, r4
 8001548:	4629      	mov	r1, r5
 800154a:	f7ff f821 	bl	8000590 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4614      	mov	r4, r2
 8001554:	461d      	mov	r5, r3
 8001556:	4b2c      	ldr	r3, [pc, #176]	@ (8001608 <bmp280_getTemprature+0x180>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ff9e 	bl	800049c <__aeabi_ui2d>
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b2c      	ldr	r3, [pc, #176]	@ (8001618 <bmp280_getTemprature+0x190>)
 8001566:	f7ff f93d 	bl	80007e4 <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4620      	mov	r0, r4
 8001570:	4629      	mov	r1, r5
 8001572:	f7fe fe55 	bl	8000220 <__aeabi_dsub>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4614      	mov	r4, r2
 800157c:	461d      	mov	r5, r3
 800157e:	4b27      	ldr	r3, [pc, #156]	@ (800161c <bmp280_getTemprature+0x194>)
 8001580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ff99 	bl	80004bc <__aeabi_i2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4620      	mov	r0, r4
 8001590:	4629      	mov	r1, r5
 8001592:	f7fe fffd 	bl	8000590 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4921      	ldr	r1, [pc, #132]	@ (8001620 <bmp280_getTemprature+0x198>)
 800159c:	e9c1 2300 	strd	r2, r3, [r1]
	t_fine = (tvar1 + tvar2);
 80015a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <bmp280_getTemprature+0x18c>)
 80015a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <bmp280_getTemprature+0x198>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7fe fe3a 	bl	8000224 <__adddf3>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	491b      	ldr	r1, [pc, #108]	@ (8001624 <bmp280_getTemprature+0x19c>)
 80015b6:	e9c1 2300 	strd	r2, r3, [r1]
	T = (tvar1 + tvar2) / 5120.0;
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <bmp280_getTemprature+0x18c>)
 80015bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c0:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <bmp280_getTemprature+0x198>)
 80015c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c6:	f7fe fe2d 	bl	8000224 <__adddf3>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <bmp280_getTemprature+0x1a0>)
 80015d8:	f7ff f904 	bl	80007e4 <__aeabi_ddiv>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4912      	ldr	r1, [pc, #72]	@ (800162c <bmp280_getTemprature+0x1a4>)
 80015e2:	e9c1 2300 	strd	r2, r3, [r1]

	temperature =T;
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <bmp280_getTemprature+0x1a4>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff f9e0 	bl	80009b4 <__aeabi_d2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <bmp280_getTemprature+0x1a8>)
 80015f8:	6013      	str	r3, [r2, #0]
}
 80015fa:	bf00      	nop
 80015fc:	bdb0      	pop	{r4, r5, r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000138 	.word	0x20000138
 8001604:	40d00000 	.word	0x40d00000
 8001608:	2000011c 	.word	0x2000011c
 800160c:	40900000 	.word	0x40900000
 8001610:	2000011e 	.word	0x2000011e
 8001614:	20000150 	.word	0x20000150
 8001618:	40c00000 	.word	0x40c00000
 800161c:	20000120 	.word	0x20000120
 8001620:	20000158 	.word	0x20000158
 8001624:	20000160 	.word	0x20000160
 8001628:	40b40000 	.word	0x40b40000
 800162c:	20000168 	.word	0x20000168
 8001630:	20000148 	.word	0x20000148
 8001634:	00000000 	.word	0x00000000

08001638 <bmp280_getPressure>:

void bmp280_getPressure(void){
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	af00      	add	r7, sp, #0

	pvar1 = ((double)t_fine/2.0) - 64000.0;
 800163c:	4bc2      	ldr	r3, [pc, #776]	@ (8001948 <bmp280_getPressure+0x310>)
 800163e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800164a:	f7ff f8cb 	bl	80007e4 <__aeabi_ddiv>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	4bbc      	ldr	r3, [pc, #752]	@ (800194c <bmp280_getPressure+0x314>)
 800165c:	f7fe fde0 	bl	8000220 <__aeabi_dsub>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	49ba      	ldr	r1, [pc, #744]	@ (8001950 <bmp280_getPressure+0x318>)
 8001666:	e9c1 2300 	strd	r2, r3, [r1]
	pvar2 = pvar1 * pvar1 * ((double)dig_P6) /32768.0;
 800166a:	4bb9      	ldr	r3, [pc, #740]	@ (8001950 <bmp280_getPressure+0x318>)
 800166c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001670:	4bb7      	ldr	r3, [pc, #732]	@ (8001950 <bmp280_getPressure+0x318>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe ff8b 	bl	8000590 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4614      	mov	r4, r2
 8001680:	461d      	mov	r5, r3
 8001682:	4bb4      	ldr	r3, [pc, #720]	@ (8001954 <bmp280_getPressure+0x31c>)
 8001684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff17 	bl	80004bc <__aeabi_i2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4620      	mov	r0, r4
 8001694:	4629      	mov	r1, r5
 8001696:	f7fe ff7b 	bl	8000590 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4bac      	ldr	r3, [pc, #688]	@ (8001958 <bmp280_getPressure+0x320>)
 80016a8:	f7ff f89c 	bl	80007e4 <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	49aa      	ldr	r1, [pc, #680]	@ (800195c <bmp280_getPressure+0x324>)
 80016b2:	e9c1 2300 	strd	r2, r3, [r1]
	pvar2 = pvar2 + pvar1 * ((double)dig_P5) *2.0;
 80016b6:	4baa      	ldr	r3, [pc, #680]	@ (8001960 <bmp280_getPressure+0x328>)
 80016b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fefd 	bl	80004bc <__aeabi_i2d>
 80016c2:	4ba3      	ldr	r3, [pc, #652]	@ (8001950 <bmp280_getPressure+0x318>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe ff62 	bl	8000590 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	f7fe fda4 	bl	8000224 <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	4b9d      	ldr	r3, [pc, #628]	@ (800195c <bmp280_getPressure+0x324>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fd9b 	bl	8000224 <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	499a      	ldr	r1, [pc, #616]	@ (800195c <bmp280_getPressure+0x324>)
 80016f4:	e9c1 2300 	strd	r2, r3, [r1]
	pvar2 = (pvar2/4.0)+ (((double)dig_P4) * 65536.0);
 80016f8:	4b98      	ldr	r3, [pc, #608]	@ (800195c <bmp280_getPressure+0x324>)
 80016fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b98      	ldr	r3, [pc, #608]	@ (8001964 <bmp280_getPressure+0x32c>)
 8001704:	f7ff f86e 	bl	80007e4 <__aeabi_ddiv>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4614      	mov	r4, r2
 800170e:	461d      	mov	r5, r3
 8001710:	4b95      	ldr	r3, [pc, #596]	@ (8001968 <bmp280_getPressure+0x330>)
 8001712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fed0 	bl	80004bc <__aeabi_i2d>
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b92      	ldr	r3, [pc, #584]	@ (800196c <bmp280_getPressure+0x334>)
 8001722:	f7fe ff35 	bl	8000590 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4620      	mov	r0, r4
 800172c:	4629      	mov	r1, r5
 800172e:	f7fe fd79 	bl	8000224 <__adddf3>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4989      	ldr	r1, [pc, #548]	@ (800195c <bmp280_getPressure+0x324>)
 8001738:	e9c1 2300 	strd	r2, r3, [r1]
	pvar1 = (((double)dig_P3) * pvar1 * pvar1/524288.0 + ((double)dig_P2) * pvar1) / 524288.0;
 800173c:	4b8c      	ldr	r3, [pc, #560]	@ (8001970 <bmp280_getPressure+0x338>)
 800173e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe feba 	bl	80004bc <__aeabi_i2d>
 8001748:	4b81      	ldr	r3, [pc, #516]	@ (8001950 <bmp280_getPressure+0x318>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe ff1f 	bl	8000590 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	4b7d      	ldr	r3, [pc, #500]	@ (8001950 <bmp280_getPressure+0x318>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe ff16 	bl	8000590 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	4b80      	ldr	r3, [pc, #512]	@ (8001974 <bmp280_getPressure+0x33c>)
 8001772:	f7ff f837 	bl	80007e4 <__aeabi_ddiv>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4614      	mov	r4, r2
 800177c:	461d      	mov	r5, r3
 800177e:	4b7e      	ldr	r3, [pc, #504]	@ (8001978 <bmp280_getPressure+0x340>)
 8001780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fe99 	bl	80004bc <__aeabi_i2d>
 800178a:	4b71      	ldr	r3, [pc, #452]	@ (8001950 <bmp280_getPressure+0x318>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe fefe 	bl	8000590 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4620      	mov	r0, r4
 800179a:	4629      	mov	r1, r5
 800179c:	f7fe fd42 	bl	8000224 <__adddf3>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b71      	ldr	r3, [pc, #452]	@ (8001974 <bmp280_getPressure+0x33c>)
 80017ae:	f7ff f819 	bl	80007e4 <__aeabi_ddiv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4966      	ldr	r1, [pc, #408]	@ (8001950 <bmp280_getPressure+0x318>)
 80017b8:	e9c1 2300 	strd	r2, r3, [r1]
	pvar1 = (1.0 + pvar1 / 32768.0)*((double)dig_P1);
 80017bc:	4b64      	ldr	r3, [pc, #400]	@ (8001950 <bmp280_getPressure+0x318>)
 80017be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	4b64      	ldr	r3, [pc, #400]	@ (8001958 <bmp280_getPressure+0x320>)
 80017c8:	f7ff f80c 	bl	80007e4 <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	4b68      	ldr	r3, [pc, #416]	@ (800197c <bmp280_getPressure+0x344>)
 80017da:	f7fe fd23 	bl	8000224 <__adddf3>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4614      	mov	r4, r2
 80017e4:	461d      	mov	r5, r3
 80017e6:	4b66      	ldr	r3, [pc, #408]	@ (8001980 <bmp280_getPressure+0x348>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fe56 	bl	800049c <__aeabi_ui2d>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4620      	mov	r0, r4
 80017f6:	4629      	mov	r1, r5
 80017f8:	f7fe feca 	bl	8000590 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4953      	ldr	r1, [pc, #332]	@ (8001950 <bmp280_getPressure+0x318>)
 8001802:	e9c1 2300 	strd	r2, r3, [r1]
	p = 1048576.0 - (double)PressureRaw;
 8001806:	4b5f      	ldr	r3, [pc, #380]	@ (8001984 <bmp280_getPressure+0x34c>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f04f 0000 	mov.w	r0, #0
 8001810:	495d      	ldr	r1, [pc, #372]	@ (8001988 <bmp280_getPressure+0x350>)
 8001812:	f7fe fd05 	bl	8000220 <__aeabi_dsub>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	495c      	ldr	r1, [pc, #368]	@ (800198c <bmp280_getPressure+0x354>)
 800181c:	e9c1 2300 	strd	r2, r3, [r1]
	p = (p - (pvar2/4096.0)) * 62500.0 / pvar1;
 8001820:	4b5a      	ldr	r3, [pc, #360]	@ (800198c <bmp280_getPressure+0x354>)
 8001822:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001826:	4b4d      	ldr	r3, [pc, #308]	@ (800195c <bmp280_getPressure+0x324>)
 8001828:	e9d3 0100 	ldrd	r0, r1, [r3]
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	4b57      	ldr	r3, [pc, #348]	@ (8001990 <bmp280_getPressure+0x358>)
 8001832:	f7fe ffd7 	bl	80007e4 <__aeabi_ddiv>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4620      	mov	r0, r4
 800183c:	4629      	mov	r1, r5
 800183e:	f7fe fcef 	bl	8000220 <__aeabi_dsub>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	a33d      	add	r3, pc, #244	@ (adr r3, 8001940 <bmp280_getPressure+0x308>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7fe fe9e 	bl	8000590 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	4b3c      	ldr	r3, [pc, #240]	@ (8001950 <bmp280_getPressure+0x318>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe ffbf 	bl	80007e4 <__aeabi_ddiv>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4948      	ldr	r1, [pc, #288]	@ (800198c <bmp280_getPressure+0x354>)
 800186c:	e9c1 2300 	strd	r2, r3, [r1]
	pvar1 = ((double)dig_P9) * p * p /2147483648.0;
 8001870:	4b48      	ldr	r3, [pc, #288]	@ (8001994 <bmp280_getPressure+0x35c>)
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe20 	bl	80004bc <__aeabi_i2d>
 800187c:	4b43      	ldr	r3, [pc, #268]	@ (800198c <bmp280_getPressure+0x354>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7fe fe85 	bl	8000590 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	4b3f      	ldr	r3, [pc, #252]	@ (800198c <bmp280_getPressure+0x354>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe fe7c 	bl	8000590 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001998 <bmp280_getPressure+0x360>)
 80018a6:	f7fe ff9d 	bl	80007e4 <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4928      	ldr	r1, [pc, #160]	@ (8001950 <bmp280_getPressure+0x318>)
 80018b0:	e9c1 2300 	strd	r2, r3, [r1]
	pvar2 = p * ((double)dig_P8)/32768.0;
 80018b4:	4b39      	ldr	r3, [pc, #228]	@ (800199c <bmp280_getPressure+0x364>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fdfe 	bl	80004bc <__aeabi_i2d>
 80018c0:	4b32      	ldr	r3, [pc, #200]	@ (800198c <bmp280_getPressure+0x354>)
 80018c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c6:	f7fe fe63 	bl	8000590 <__aeabi_dmul>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	4b20      	ldr	r3, [pc, #128]	@ (8001958 <bmp280_getPressure+0x320>)
 80018d8:	f7fe ff84 	bl	80007e4 <__aeabi_ddiv>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	491e      	ldr	r1, [pc, #120]	@ (800195c <bmp280_getPressure+0x324>)
 80018e2:	e9c1 2300 	strd	r2, r3, [r1]
	p = p + (pvar1 + pvar2 + ((double)dig_P7)) / 16.0;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <bmp280_getPressure+0x318>)
 80018e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <bmp280_getPressure+0x324>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fc97 	bl	8000224 <__adddf3>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4614      	mov	r4, r2
 80018fc:	461d      	mov	r5, r3
 80018fe:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <bmp280_getPressure+0x368>)
 8001900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fdd9 	bl	80004bc <__aeabi_i2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f7fe fc87 	bl	8000224 <__adddf3>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <bmp280_getPressure+0x36c>)
 8001924:	f7fe ff5e 	bl	80007e4 <__aeabi_ddiv>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	4b16      	ldr	r3, [pc, #88]	@ (800198c <bmp280_getPressure+0x354>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe fc75 	bl	8000224 <__adddf3>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	e033      	b.n	80019a8 <bmp280_getPressure+0x370>
 8001940:	00000000 	.word	0x00000000
 8001944:	40ee8480 	.word	0x40ee8480
 8001948:	20000160 	.word	0x20000160
 800194c:	40ef4000 	.word	0x40ef4000
 8001950:	20000170 	.word	0x20000170
 8001954:	2000012c 	.word	0x2000012c
 8001958:	40e00000 	.word	0x40e00000
 800195c:	20000178 	.word	0x20000178
 8001960:	2000012a 	.word	0x2000012a
 8001964:	40100000 	.word	0x40100000
 8001968:	20000128 	.word	0x20000128
 800196c:	40f00000 	.word	0x40f00000
 8001970:	20000126 	.word	0x20000126
 8001974:	41200000 	.word	0x41200000
 8001978:	20000124 	.word	0x20000124
 800197c:	3ff00000 	.word	0x3ff00000
 8001980:	20000122 	.word	0x20000122
 8001984:	20000140 	.word	0x20000140
 8001988:	41300000 	.word	0x41300000
 800198c:	20000180 	.word	0x20000180
 8001990:	40b00000 	.word	0x40b00000
 8001994:	20000132 	.word	0x20000132
 8001998:	41e00000 	.word	0x41e00000
 800199c:	20000130 	.word	0x20000130
 80019a0:	2000012e 	.word	0x2000012e
 80019a4:	40300000 	.word	0x40300000
 80019a8:	4907      	ldr	r1, [pc, #28]	@ (80019c8 <bmp280_getPressure+0x390>)
 80019aa:	e9c1 2300 	strd	r2, r3, [r1]

	pressure = p;
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <bmp280_getPressure+0x390>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7fe fffc 	bl	80009b4 <__aeabi_d2f>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a03      	ldr	r2, [pc, #12]	@ (80019cc <bmp280_getPressure+0x394>)
 80019c0:	6013      	str	r3, [r2, #0]
}
 80019c2:	bf00      	nop
 80019c4:	bdb0      	pop	{r4, r5, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000180 	.word	0x20000180
 80019cc:	2000014c 	.word	0x2000014c

080019d0 <BMP280_RawDataRead>:

void BMP280_RawDataRead(bmp280_parameters* params){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af04      	add	r7, sp, #16
 80019d6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6] = {0};
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	2300      	movs	r3, #0
 80019de:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Mem_Read(params->hi2cX, BMP280_READ_ADDR, READ_DATA_START, 1, rawData, 6, 100);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6898      	ldr	r0, [r3, #8]
 80019e4:	2364      	movs	r3, #100	@ 0x64
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	2306      	movs	r3, #6
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2301      	movs	r3, #1
 80019f4:	22f7      	movs	r2, #247	@ 0xf7
 80019f6:	21ed      	movs	r1, #237	@ 0xed
 80019f8:	f000 fd9e 	bl	8002538 <HAL_I2C_Mem_Read>

	temperatureRaw = ((rawData[3] << 12) | (rawData[4] << 8) | (rawData[5] >> 4));
 80019fc:	7afb      	ldrb	r3, [r7, #11]
 80019fe:	031a      	lsls	r2, r3, #12
 8001a00:	7b3b      	ldrb	r3, [r7, #12]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	4313      	orrs	r3, r2
 8001a06:	7b7a      	ldrb	r2, [r7, #13]
 8001a08:	0912      	lsrs	r2, r2, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd54 	bl	80004bc <__aeabi_i2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	490b      	ldr	r1, [pc, #44]	@ (8001a48 <BMP280_RawDataRead+0x78>)
 8001a1a:	e9c1 2300 	strd	r2, r3, [r1]
	PressureRaw =   ((rawData[0] << 12) | (rawData[1] << 8) | (rawData[2] >> 4));;
 8001a1e:	7a3b      	ldrb	r3, [r7, #8]
 8001a20:	031a      	lsls	r2, r3, #12
 8001a22:	7a7b      	ldrb	r3, [r7, #9]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	4313      	orrs	r3, r2
 8001a28:	7aba      	ldrb	r2, [r7, #10]
 8001a2a:	0912      	lsrs	r2, r2, #4
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd43 	bl	80004bc <__aeabi_i2d>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4904      	ldr	r1, [pc, #16]	@ (8001a4c <BMP280_RawDataRead+0x7c>)
 8001a3c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000138 	.word	0x20000138
 8001a4c:	20000140 	.word	0x20000140

08001a50 <BMP280_Init>:

void BMP280_Init(bmp280_parameters* params)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	 uint8_t ctrl_meas = (params->oversamplingT << T_OFFSET) | (params->oversamplingP << P_OFFSET) | params->mode;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	015b      	lsls	r3, r3, #5
 8001a5e:	b25a      	sxtb	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b25a      	sxtb	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	789b      	ldrb	r3, [r3, #2]
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b25b      	sxtb	r3, r3
 8001a76:	73fb      	strb	r3, [r7, #15]
	 uint8_t config = (params->tstandby << T_OFFSET) | (params->filter << P_OFFSET) | params->spiEn;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	795b      	ldrb	r3, [r3, #5]
 8001a7c:	015b      	lsls	r3, r3, #5
 8001a7e:	b25a      	sxtb	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	78db      	ldrb	r3, [r3, #3]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b25a      	sxtb	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	791b      	ldrb	r3, [r3, #4]
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	73bb      	strb	r3, [r7, #14]

	BMP280_WriteRegister(params,BMP280_GET_DATA, ctrl_meas);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	21f4      	movs	r1, #244	@ 0xf4
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fc2f 	bl	8001302 <BMP280_WriteRegister>
	BMP280_WriteRegister(params,BMP280_CONFIG, config);
 8001aa4:	7bbb      	ldrb	r3, [r7, #14]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	21f5      	movs	r1, #245	@ 0xf5
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fc29 	bl	8001302 <BMP280_WriteRegister>
	BMP280_Calibration(params);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fc41 	bl	8001338 <BMP280_Calibration>
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <CalculationStart>:


void CalculationStart(float* t,float* p, bmp280_parameters* params){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
	BMP280_RawDataRead(params);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff7f 	bl	80019d0 <BMP280_RawDataRead>

	if(params->modeMeasure == ONLY_TEMPERATURE || params->modeMeasure  == BOTH){
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	799b      	ldrb	r3, [r3, #6]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d003      	beq.n	8001ae2 <CalculationStart+0x22>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	799b      	ldrb	r3, [r3, #6]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d105      	bne.n	8001aee <CalculationStart+0x2e>
		bmp280_getTemprature();
 8001ae2:	f7ff fcd1 	bl	8001488 <bmp280_getTemprature>
		*t = temperature;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <CalculationStart+0x54>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	601a      	str	r2, [r3, #0]
	}
	if (params->modeMeasure  == ONLY_PRESSURE || params->modeMeasure  == BOTH){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	799b      	ldrb	r3, [r3, #6]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d003      	beq.n	8001afe <CalculationStart+0x3e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	799b      	ldrb	r3, [r3, #6]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d105      	bne.n	8001b0a <CalculationStart+0x4a>
		bmp280_getPressure();
 8001afe:	f7ff fd9b 	bl	8001638 <bmp280_getPressure>
		*p = pressure;
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <CalculationStart+0x58>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	601a      	str	r2, [r3, #0]
	}
}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000148 	.word	0x20000148
 8001b18:	2000014c 	.word	0x2000014c

08001b1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b26:	2003      	movs	r0, #3
 8001b28:	f000 f95a 	bl	8001de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f000 f80d 	bl	8001b4c <HAL_InitTick>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	71fb      	strb	r3, [r7, #7]
 8001b3c:	e001      	b.n	8001b42 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b3e:	f7ff fa7b 	bl	8001038 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b42:	79fb      	ldrb	r3, [r7, #7]

}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <HAL_InitTick+0x68>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d022      	beq.n	8001ba6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b60:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <HAL_InitTick+0x6c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <HAL_InitTick+0x68>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f966 	bl	8001e46 <HAL_SYSTICK_Config>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10f      	bne.n	8001ba0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	d809      	bhi.n	8001b9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b86:	2200      	movs	r2, #0
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8e:	f000 f932 	bl	8001df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <HAL_InitTick+0x70>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e007      	b.n	8001baa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e004      	b.n	8001baa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e001      	b.n	8001baa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <HAL_IncTick+0x1c>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <HAL_IncTick+0x20>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a03      	ldr	r2, [pc, #12]	@ (8001bdc <HAL_IncTick+0x1c>)
 8001bd0:	6013      	str	r3, [r2, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	20000188 	.word	0x20000188
 8001be0:	20000008 	.word	0x20000008

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	@ (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000188 	.word	0x20000188

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d004      	beq.n	8001c20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_Delay+0x40>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c20:	bf00      	nop
 8001c22:	f7ff ffdf 	bl	8001be4 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d8f7      	bhi.n	8001c22 <HAL_Delay+0x26>
  {
  }
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000008 	.word	0x20000008

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	@ (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	@ (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	@ (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	@ 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	@ 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dac:	d301      	bcc.n	8001db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00f      	b.n	8001dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <SysTick_Config+0x40>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dba:	210f      	movs	r1, #15
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f7ff ff8e 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <SysTick_Config+0x40>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dca:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <SysTick_Config+0x40>)
 8001dcc:	2207      	movs	r2, #7
 8001dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	e000e010 	.word	0xe000e010

08001de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff29 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff40 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff90 	bl	8001d34 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5f 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff33 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa4 	bl	8001d9c <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e6e:	e15a      	b.n	8002126 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 814c 	beq.w	8002120 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d005      	beq.n	8001ea0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d130      	bne.n	8001f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 0201 	and.w	r2, r3, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d017      	beq.n	8001f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d123      	bne.n	8001f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	08da      	lsrs	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3208      	adds	r2, #8
 8001f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	08da      	lsrs	r2, r3, #3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3208      	adds	r2, #8
 8001f8c:	6939      	ldr	r1, [r7, #16]
 8001f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0203 	and.w	r2, r3, #3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80a6 	beq.w	8002120 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8002144 <HAL_GPIO_Init+0x2e4>)
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd8:	4a5a      	ldr	r2, [pc, #360]	@ (8002144 <HAL_GPIO_Init+0x2e4>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fe0:	4b58      	ldr	r3, [pc, #352]	@ (8002144 <HAL_GPIO_Init+0x2e4>)
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fec:	4a56      	ldr	r2, [pc, #344]	@ (8002148 <HAL_GPIO_Init+0x2e8>)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002016:	d01f      	beq.n	8002058 <HAL_GPIO_Init+0x1f8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a4c      	ldr	r2, [pc, #304]	@ (800214c <HAL_GPIO_Init+0x2ec>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d019      	beq.n	8002054 <HAL_GPIO_Init+0x1f4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a4b      	ldr	r2, [pc, #300]	@ (8002150 <HAL_GPIO_Init+0x2f0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <HAL_GPIO_Init+0x1f0>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a4a      	ldr	r2, [pc, #296]	@ (8002154 <HAL_GPIO_Init+0x2f4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00d      	beq.n	800204c <HAL_GPIO_Init+0x1ec>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a49      	ldr	r2, [pc, #292]	@ (8002158 <HAL_GPIO_Init+0x2f8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d007      	beq.n	8002048 <HAL_GPIO_Init+0x1e8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a48      	ldr	r2, [pc, #288]	@ (800215c <HAL_GPIO_Init+0x2fc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_GPIO_Init+0x1e4>
 8002040:	2305      	movs	r3, #5
 8002042:	e00a      	b.n	800205a <HAL_GPIO_Init+0x1fa>
 8002044:	2306      	movs	r3, #6
 8002046:	e008      	b.n	800205a <HAL_GPIO_Init+0x1fa>
 8002048:	2304      	movs	r3, #4
 800204a:	e006      	b.n	800205a <HAL_GPIO_Init+0x1fa>
 800204c:	2303      	movs	r3, #3
 800204e:	e004      	b.n	800205a <HAL_GPIO_Init+0x1fa>
 8002050:	2302      	movs	r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x1fa>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_GPIO_Init+0x1fa>
 8002058:	2300      	movs	r3, #0
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4093      	lsls	r3, r2
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206a:	4937      	ldr	r1, [pc, #220]	@ (8002148 <HAL_GPIO_Init+0x2e8>)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002078:	4b39      	ldr	r3, [pc, #228]	@ (8002160 <HAL_GPIO_Init+0x300>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800209c:	4a30      	ldr	r2, [pc, #192]	@ (8002160 <HAL_GPIO_Init+0x300>)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002160 <HAL_GPIO_Init+0x300>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020c6:	4a26      	ldr	r2, [pc, #152]	@ (8002160 <HAL_GPIO_Init+0x300>)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80020cc:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <HAL_GPIO_Init+0x300>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002160 <HAL_GPIO_Init+0x300>)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <HAL_GPIO_Init+0x300>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800211a:	4a11      	ldr	r2, [pc, #68]	@ (8002160 <HAL_GPIO_Init+0x300>)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	f47f ae9d 	bne.w	8001e70 <HAL_GPIO_Init+0x10>
  }
}
 8002136:	bf00      	nop
 8002138:	bf00      	nop
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40021000 	.word	0x40021000
 8002148:	40010000 	.word	0x40010000
 800214c:	48000400 	.word	0x48000400
 8002150:	48000800 	.word	0x48000800
 8002154:	48000c00 	.word	0x48000c00
 8002158:	48001000 	.word	0x48001000
 800215c:	48001400 	.word	0x48001400
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002180:	e002      	b.n	8002188 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800219e:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a0:	695a      	ldr	r2, [r3, #20]
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d006      	beq.n	80021b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021aa:	4a05      	ldr	r2, [pc, #20]	@ (80021c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f806 	bl	80021c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40010400 	.word	0x40010400

080021c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e08d      	b.n	8002308 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7fe ff3d 	bl	8001080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2224      	movs	r2, #36	@ 0x24
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0201 	bic.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800222a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800223a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	e006      	b.n	8002262 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002260:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d108      	bne.n	800227c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	e007      	b.n	800228c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800228a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800229a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800229e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69d9      	ldr	r1, [r3, #28]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1a      	ldr	r2, [r3, #32]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0201 	orr.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4603      	mov	r3, r0
 8002320:	817b      	strh	r3, [r7, #10]
 8002322:	460b      	mov	r3, r1
 8002324:	813b      	strh	r3, [r7, #8]
 8002326:	4613      	mov	r3, r2
 8002328:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b20      	cmp	r3, #32
 8002334:	f040 80f9 	bne.w	800252a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_I2C_Mem_Write+0x34>
 800233e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800234a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0ed      	b.n	800252c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_I2C_Mem_Write+0x4e>
 800235a:	2302      	movs	r3, #2
 800235c:	e0e6      	b.n	800252c <HAL_I2C_Mem_Write+0x21c>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002366:	f7ff fc3d 	bl	8001be4 <HAL_GetTick>
 800236a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2319      	movs	r3, #25
 8002372:	2201      	movs	r2, #1
 8002374:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fac3 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0d1      	b.n	800252c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2221      	movs	r2, #33	@ 0x21
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2240      	movs	r2, #64	@ 0x40
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a3a      	ldr	r2, [r7, #32]
 80023a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023b0:	88f8      	ldrh	r0, [r7, #6]
 80023b2:	893a      	ldrh	r2, [r7, #8]
 80023b4:	8979      	ldrh	r1, [r7, #10]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	4603      	mov	r3, r0
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f9d3 	bl	800276c <I2C_RequestMemoryWrite>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0a9      	b.n	800252c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2bff      	cmp	r3, #255	@ 0xff
 80023e0:	d90e      	bls.n	8002400 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	22ff      	movs	r2, #255	@ 0xff
 80023e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	2300      	movs	r3, #0
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fc47 	bl	8002c8c <I2C_TransferConfig>
 80023fe:	e00f      	b.n	8002420 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240e:	b2da      	uxtb	r2, r3
 8002410:	8979      	ldrh	r1, [r7, #10]
 8002412:	2300      	movs	r3, #0
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fc36 	bl	8002c8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 fac6 	bl	80029b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e07b      	b.n	800252c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d034      	beq.n	80024d8 <HAL_I2C_Mem_Write+0x1c8>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002472:	2b00      	cmp	r3, #0
 8002474:	d130      	bne.n	80024d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247c:	2200      	movs	r2, #0
 800247e:	2180      	movs	r1, #128	@ 0x80
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fa3f 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e04d      	b.n	800252c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	2bff      	cmp	r3, #255	@ 0xff
 8002498:	d90e      	bls.n	80024b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	22ff      	movs	r2, #255	@ 0xff
 800249e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	8979      	ldrh	r1, [r7, #10]
 80024a8:	2300      	movs	r3, #0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fbeb 	bl	8002c8c <I2C_TransferConfig>
 80024b6:	e00f      	b.n	80024d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	8979      	ldrh	r1, [r7, #10]
 80024ca:	2300      	movs	r3, #0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fbda 	bl	8002c8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d19e      	bne.n	8002420 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 faac 	bl	8002a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e01a      	b.n	800252c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2220      	movs	r2, #32
 80024fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <HAL_I2C_Mem_Write+0x224>)
 800250a:	400b      	ands	r3, r1
 800250c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
  }
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	fe00e800 	.word	0xfe00e800

08002538 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	461a      	mov	r2, r3
 8002546:	4603      	mov	r3, r0
 8002548:	817b      	strh	r3, [r7, #10]
 800254a:	460b      	mov	r3, r1
 800254c:	813b      	strh	r3, [r7, #8]
 800254e:	4613      	mov	r3, r2
 8002550:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b20      	cmp	r3, #32
 800255c:	f040 80fd 	bne.w	800275a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_I2C_Mem_Read+0x34>
 8002566:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002572:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0f1      	b.n	800275c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_I2C_Mem_Read+0x4e>
 8002582:	2302      	movs	r3, #2
 8002584:	e0ea      	b.n	800275c <HAL_I2C_Mem_Read+0x224>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800258e:	f7ff fb29 	bl	8001be4 <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2319      	movs	r3, #25
 800259a:	2201      	movs	r2, #1
 800259c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f9af 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0d5      	b.n	800275c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2222      	movs	r2, #34	@ 0x22
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2240      	movs	r2, #64	@ 0x40
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a3a      	ldr	r2, [r7, #32]
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80025d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025d8:	88f8      	ldrh	r0, [r7, #6]
 80025da:	893a      	ldrh	r2, [r7, #8]
 80025dc:	8979      	ldrh	r1, [r7, #10]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	4603      	mov	r3, r0
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f913 	bl	8002814 <I2C_RequestMemoryRead>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0ad      	b.n	800275c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2bff      	cmp	r3, #255	@ 0xff
 8002608:	d90e      	bls.n	8002628 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	22ff      	movs	r2, #255	@ 0xff
 800260e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002614:	b2da      	uxtb	r2, r3
 8002616:	8979      	ldrh	r1, [r7, #10]
 8002618:	4b52      	ldr	r3, [pc, #328]	@ (8002764 <HAL_I2C_Mem_Read+0x22c>)
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fb33 	bl	8002c8c <I2C_TransferConfig>
 8002626:	e00f      	b.n	8002648 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002636:	b2da      	uxtb	r2, r3
 8002638:	8979      	ldrh	r1, [r7, #10]
 800263a:	4b4a      	ldr	r3, [pc, #296]	@ (8002764 <HAL_I2C_Mem_Read+0x22c>)
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fb22 	bl	8002c8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264e:	2200      	movs	r2, #0
 8002650:	2104      	movs	r1, #4
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f956 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07c      	b.n	800275c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d034      	beq.n	8002708 <HAL_I2C_Mem_Read+0x1d0>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d130      	bne.n	8002708 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ac:	2200      	movs	r2, #0
 80026ae:	2180      	movs	r1, #128	@ 0x80
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f927 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e04d      	b.n	800275c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2bff      	cmp	r3, #255	@ 0xff
 80026c8:	d90e      	bls.n	80026e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	22ff      	movs	r2, #255	@ 0xff
 80026ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	8979      	ldrh	r1, [r7, #10]
 80026d8:	2300      	movs	r3, #0
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 fad3 	bl	8002c8c <I2C_TransferConfig>
 80026e6:	e00f      	b.n	8002708 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	8979      	ldrh	r1, [r7, #10]
 80026fa:	2300      	movs	r3, #0
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fac2 	bl	8002c8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d19a      	bne.n	8002648 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f994 	bl	8002a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e01a      	b.n	800275c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2220      	movs	r2, #32
 800272c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_I2C_Mem_Read+0x230>)
 800273a:	400b      	ands	r3, r1
 800273c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800275a:	2302      	movs	r3, #2
  }
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	80002400 	.word	0x80002400
 8002768:	fe00e800 	.word	0xfe00e800

0800276c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	4608      	mov	r0, r1
 8002776:	4611      	mov	r1, r2
 8002778:	461a      	mov	r2, r3
 800277a:	4603      	mov	r3, r0
 800277c:	817b      	strh	r3, [r7, #10]
 800277e:	460b      	mov	r3, r1
 8002780:	813b      	strh	r3, [r7, #8]
 8002782:	4613      	mov	r3, r2
 8002784:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	8979      	ldrh	r1, [r7, #10]
 800278c:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <I2C_RequestMemoryWrite+0xa4>)
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 fa79 	bl	8002c8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	69b9      	ldr	r1, [r7, #24]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f909 	bl	80029b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e02c      	b.n	8002808 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d105      	bne.n	80027c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027b4:	893b      	ldrh	r3, [r7, #8]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80027be:	e015      	b.n	80027ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027c0:	893b      	ldrh	r3, [r7, #8]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	69b9      	ldr	r1, [r7, #24]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f8ef 	bl	80029b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e012      	b.n	8002808 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027e2:	893b      	ldrh	r3, [r7, #8]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2200      	movs	r2, #0
 80027f4:	2180      	movs	r1, #128	@ 0x80
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f884 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	80002000 	.word	0x80002000

08002814 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4603      	mov	r3, r0
 8002824:	817b      	strh	r3, [r7, #10]
 8002826:	460b      	mov	r3, r1
 8002828:	813b      	strh	r3, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	8979      	ldrh	r1, [r7, #10]
 8002834:	4b20      	ldr	r3, [pc, #128]	@ (80028b8 <I2C_RequestMemoryRead+0xa4>)
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	2300      	movs	r3, #0
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 fa26 	bl	8002c8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	69b9      	ldr	r1, [r7, #24]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f8b6 	bl	80029b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e02c      	b.n	80028ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d105      	bne.n	8002866 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800285a:	893b      	ldrh	r3, [r7, #8]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	629a      	str	r2, [r3, #40]	@ 0x28
 8002864:	e015      	b.n	8002892 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002866:	893b      	ldrh	r3, [r7, #8]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	b29b      	uxth	r3, r3
 800286c:	b2da      	uxtb	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	69b9      	ldr	r1, [r7, #24]
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f89c 	bl	80029b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e012      	b.n	80028ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002888:	893b      	ldrh	r3, [r7, #8]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2200      	movs	r2, #0
 800289a:	2140      	movs	r1, #64	@ 0x40
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f831 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	80002000 	.word	0x80002000

080028bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d103      	bne.n	80028da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2200      	movs	r2, #0
 80028d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d007      	beq.n	80028f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	619a      	str	r2, [r3, #24]
  }
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002914:	e03b      	b.n	800298e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	6839      	ldr	r1, [r7, #0]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f8d6 	bl	8002acc <I2C_IsErrorOccurred>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e041      	b.n	80029ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002930:	d02d      	beq.n	800298e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002932:	f7ff f957 	bl	8001be4 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d122      	bne.n	800298e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4013      	ands	r3, r2
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	429a      	cmp	r2, r3
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	429a      	cmp	r2, r3
 8002964:	d113      	bne.n	800298e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	f043 0220 	orr.w	r2, r3, #32
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e00f      	b.n	80029ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699a      	ldr	r2, [r3, #24]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4013      	ands	r3, r2
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	429a      	cmp	r2, r3
 800299c:	bf0c      	ite	eq
 800299e:	2301      	moveq	r3, #1
 80029a0:	2300      	movne	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d0b4      	beq.n	8002916 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029c2:	e033      	b.n	8002a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f87f 	bl	8002acc <I2C_IsErrorOccurred>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e031      	b.n	8002a3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029de:	d025      	beq.n	8002a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e0:	f7ff f900 	bl	8001be4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d302      	bcc.n	80029f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d11a      	bne.n	8002a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d013      	beq.n	8002a2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e007      	b.n	8002a3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d1c4      	bne.n	80029c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a50:	e02f      	b.n	8002ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f838 	bl	8002acc <I2C_IsErrorOccurred>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e02d      	b.n	8002ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a66:	f7ff f8bd 	bl	8001be4 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d302      	bcc.n	8002a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d11a      	bne.n	8002ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d013      	beq.n	8002ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e007      	b.n	8002ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d1c8      	bne.n	8002a52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	@ 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d068      	beq.n	8002bca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2210      	movs	r2, #16
 8002afe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b00:	e049      	b.n	8002b96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d045      	beq.n	8002b96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7ff f86b 	bl	8001be4 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <I2C_IsErrorOccurred+0x54>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d13a      	bne.n	8002b96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b42:	d121      	bne.n	8002b88 <I2C_IsErrorOccurred+0xbc>
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b4a:	d01d      	beq.n	8002b88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d01a      	beq.n	8002b88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b62:	f7ff f83f 	bl	8001be4 <HAL_GetTick>
 8002b66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b68:	e00e      	b.n	8002b88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b6a:	f7ff f83b 	bl	8001be4 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b19      	cmp	r3, #25
 8002b76:	d907      	bls.n	8002b88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f043 0320 	orr.w	r3, r3, #32
 8002b7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002b86:	e006      	b.n	8002b96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	d1e9      	bne.n	8002b6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d003      	beq.n	8002bac <I2C_IsErrorOccurred+0xe0>
 8002ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0aa      	beq.n	8002b02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d103      	bne.n	8002bbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
 8002bc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	f043 0308 	orr.w	r3, r3, #8
 8002c04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00b      	beq.n	8002c38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	f043 0302 	orr.w	r3, r3, #2
 8002c26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01c      	beq.n	8002c7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff fe3b 	bl	80028bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <I2C_IsErrorOccurred+0x1bc>)
 8002c52:	400b      	ands	r3, r1
 8002c54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3728      	adds	r7, #40	@ 0x28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	fe00e800 	.word	0xfe00e800

08002c8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	817b      	strh	r3, [r7, #10]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c9e:	897b      	ldrh	r3, [r7, #10]
 8002ca0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ca4:	7a7b      	ldrb	r3, [r7, #9]
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	0d5b      	lsrs	r3, r3, #21
 8002cc6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002cca:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <I2C_TransferConfig+0x60>)
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	ea02 0103 	and.w	r1, r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	03ff63ff 	.word	0x03ff63ff

08002cf0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d138      	bne.n	8002d78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e032      	b.n	8002d7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	@ 0x24
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6819      	ldr	r1, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e000      	b.n	8002d7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d139      	bne.n	8002e10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e033      	b.n	8002e12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2224      	movs	r2, #36	@ 0x24
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002dd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d141      	bne.n	8002eb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e3a:	d131      	bne.n	8002ea0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e3c:	4b47      	ldr	r3, [pc, #284]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e42:	4a46      	ldr	r2, [pc, #280]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e4c:	4b43      	ldr	r3, [pc, #268]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e54:	4a41      	ldr	r2, [pc, #260]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e5c:	4b40      	ldr	r3, [pc, #256]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2232      	movs	r2, #50	@ 0x32
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	4a3f      	ldr	r2, [pc, #252]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	0c9b      	lsrs	r3, r3, #18
 8002e6e:	3301      	adds	r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e72:	e002      	b.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7a:	4b38      	ldr	r3, [pc, #224]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e86:	d102      	bne.n	8002e8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f2      	bne.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e8e:	4b33      	ldr	r3, [pc, #204]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e9a:	d158      	bne.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e057      	b.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002eb0:	e04d      	b.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eb8:	d141      	bne.n	8002f3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eba:	4b28      	ldr	r3, [pc, #160]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec6:	d131      	bne.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ec8:	4b24      	ldr	r3, [pc, #144]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ece:	4a23      	ldr	r2, [pc, #140]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed8:	4b20      	ldr	r3, [pc, #128]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ee0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2232      	movs	r2, #50	@ 0x32
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	0c9b      	lsrs	r3, r3, #18
 8002efa:	3301      	adds	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002efe:	e002      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f06:	4b15      	ldr	r3, [pc, #84]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f12:	d102      	bne.n	8002f1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f2      	bne.n	8002f00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1a:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f26:	d112      	bne.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e011      	b.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f32:	4a0a      	ldr	r2, [pc, #40]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f3c:	e007      	b.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f3e:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f46:	4a05      	ldr	r2, [pc, #20]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	20000000 	.word	0x20000000
 8002f64:	431bde83 	.word	0x431bde83

08002f68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f6c:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a04      	ldr	r2, [pc, #16]	@ (8002f84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f76:	6093      	str	r3, [r2, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40007000 	.word	0x40007000

08002f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e2fe      	b.n	8003598 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d075      	beq.n	8003092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa6:	4b97      	ldr	r3, [pc, #604]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb0:	4b94      	ldr	r3, [pc, #592]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d102      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x3e>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_OscConfig+0x44>
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d10b      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	4b8d      	ldr	r3, [pc, #564]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d05b      	beq.n	8003090 <HAL_RCC_OscConfig+0x108>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d157      	bne.n	8003090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e2d9      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fec:	d106      	bne.n	8002ffc <HAL_RCC_OscConfig+0x74>
 8002fee:	4b85      	ldr	r3, [pc, #532]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a84      	ldr	r2, [pc, #528]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e01d      	b.n	8003038 <HAL_RCC_OscConfig+0xb0>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x98>
 8003006:	4b7f      	ldr	r3, [pc, #508]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a7e      	ldr	r2, [pc, #504]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 800300c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4b7c      	ldr	r3, [pc, #496]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7b      	ldr	r2, [pc, #492]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e00b      	b.n	8003038 <HAL_RCC_OscConfig+0xb0>
 8003020:	4b78      	ldr	r3, [pc, #480]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a77      	ldr	r2, [pc, #476]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8003026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b75      	ldr	r3, [pc, #468]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a74      	ldr	r2, [pc, #464]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8003032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fdd0 	bl	8001be4 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe fdcc 	bl	8001be4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	@ 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e29e      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305a:	4b6a      	ldr	r3, [pc, #424]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0xc0>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe fdbc 	bl	8001be4 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe fdb8 	bl	8001be4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	@ 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e28a      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003082:	4b60      	ldr	r3, [pc, #384]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0xe8>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d075      	beq.n	800318a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309e:	4b59      	ldr	r3, [pc, #356]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a8:	4b56      	ldr	r3, [pc, #344]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b0c      	cmp	r3, #12
 80030b6:	d102      	bne.n	80030be <HAL_RCC_OscConfig+0x136>
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d002      	beq.n	80030c4 <HAL_RCC_OscConfig+0x13c>
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d11f      	bne.n	8003104 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_OscConfig+0x154>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e25d      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030dc:	4b49      	ldr	r3, [pc, #292]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	4946      	ldr	r1, [pc, #280]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030f0:	4b45      	ldr	r3, [pc, #276]	@ (8003208 <HAL_RCC_OscConfig+0x280>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fe fd29 	bl	8001b4c <HAL_InitTick>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d043      	beq.n	8003188 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e249      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d023      	beq.n	8003154 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800310c:	4b3d      	ldr	r3, [pc, #244]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a3c      	ldr	r2, [pc, #240]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8003112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe fd64 	bl	8001be4 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003120:	f7fe fd60 	bl	8001be4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e232      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003132:	4b34      	ldr	r3, [pc, #208]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313e:	4b31      	ldr	r3, [pc, #196]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	061b      	lsls	r3, r3, #24
 800314c:	492d      	ldr	r1, [pc, #180]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
 8003152:	e01a      	b.n	800318a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003154:	4b2b      	ldr	r3, [pc, #172]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a2a      	ldr	r2, [pc, #168]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 800315a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800315e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe fd40 	bl	8001be4 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003168:	f7fe fd3c 	bl	8001be4 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e20e      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800317a:	4b22      	ldr	r3, [pc, #136]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x1e0>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d041      	beq.n	800321a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319e:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 80031a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031a4:	4a17      	ldr	r2, [pc, #92]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7fe fd19 	bl	8001be4 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fe fd15 	bl	8001be4 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1e7      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 80031ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ef      	beq.n	80031b6 <HAL_RCC_OscConfig+0x22e>
 80031d6:	e020      	b.n	800321a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031de:	4a09      	ldr	r2, [pc, #36]	@ (8003204 <HAL_RCC_OscConfig+0x27c>)
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe fcfc 	bl	8001be4 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031ee:	e00d      	b.n	800320c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe fcf8 	bl	8001be4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d906      	bls.n	800320c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e1ca      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800320c:	4b8c      	ldr	r3, [pc, #560]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 800320e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1ea      	bne.n	80031f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80a6 	beq.w	8003374 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800322c:	4b84      	ldr	r3, [pc, #528]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_OscConfig+0x2b4>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x2b6>
 800323c:	2300      	movs	r3, #0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00d      	beq.n	800325e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b7f      	ldr	r3, [pc, #508]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003246:	4a7e      	ldr	r2, [pc, #504]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324c:	6593      	str	r3, [r2, #88]	@ 0x58
 800324e:	4b7c      	ldr	r3, [pc, #496]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800325a:	2301      	movs	r3, #1
 800325c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325e:	4b79      	ldr	r3, [pc, #484]	@ (8003444 <HAL_RCC_OscConfig+0x4bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d118      	bne.n	800329c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800326a:	4b76      	ldr	r3, [pc, #472]	@ (8003444 <HAL_RCC_OscConfig+0x4bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a75      	ldr	r2, [pc, #468]	@ (8003444 <HAL_RCC_OscConfig+0x4bc>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003276:	f7fe fcb5 	bl	8001be4 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327e:	f7fe fcb1 	bl	8001be4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e183      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003290:	4b6c      	ldr	r3, [pc, #432]	@ (8003444 <HAL_RCC_OscConfig+0x4bc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d108      	bne.n	80032b6 <HAL_RCC_OscConfig+0x32e>
 80032a4:	4b66      	ldr	r3, [pc, #408]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032aa:	4a65      	ldr	r2, [pc, #404]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032b4:	e024      	b.n	8003300 <HAL_RCC_OscConfig+0x378>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d110      	bne.n	80032e0 <HAL_RCC_OscConfig+0x358>
 80032be:	4b60      	ldr	r3, [pc, #384]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80032c6:	f043 0304 	orr.w	r3, r3, #4
 80032ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032de:	e00f      	b.n	8003300 <HAL_RCC_OscConfig+0x378>
 80032e0:	4b57      	ldr	r3, [pc, #348]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e6:	4a56      	ldr	r2, [pc, #344]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032f0:	4b53      	ldr	r3, [pc, #332]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f6:	4a52      	ldr	r2, [pc, #328]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80032f8:	f023 0304 	bic.w	r3, r3, #4
 80032fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d016      	beq.n	8003336 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fe fc6c 	bl	8001be4 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800330e:	e00a      	b.n	8003326 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003310:	f7fe fc68 	bl	8001be4 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e138      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003326:	4b46      	ldr	r3, [pc, #280]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0ed      	beq.n	8003310 <HAL_RCC_OscConfig+0x388>
 8003334:	e015      	b.n	8003362 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fe fc55 	bl	8001be4 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800333c:	e00a      	b.n	8003354 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fe fc51 	bl	8001be4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334c:	4293      	cmp	r3, r2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e121      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003354:	4b3a      	ldr	r3, [pc, #232]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1ed      	bne.n	800333e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003362:	7ffb      	ldrb	r3, [r7, #31]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d105      	bne.n	8003374 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003368:	4b35      	ldr	r3, [pc, #212]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336c:	4a34      	ldr	r2, [pc, #208]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 800336e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003372:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d03c      	beq.n	80033fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01c      	beq.n	80033c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003388:	4b2d      	ldr	r3, [pc, #180]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 800338a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800338e:	4a2c      	ldr	r2, [pc, #176]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7fe fc24 	bl	8001be4 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033a0:	f7fe fc20 	bl	8001be4 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0f2      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033b2:	4b23      	ldr	r3, [pc, #140]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80033b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0ef      	beq.n	80033a0 <HAL_RCC_OscConfig+0x418>
 80033c0:	e01b      	b.n	80033fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80033c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d2:	f7fe fc07 	bl	8001be4 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033da:	f7fe fc03 	bl	8001be4 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e0d5      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033ec:	4b14      	ldr	r3, [pc, #80]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 80033ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1ef      	bne.n	80033da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80c9 	beq.w	8003596 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003404:	4b0e      	ldr	r3, [pc, #56]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b0c      	cmp	r3, #12
 800340e:	f000 8083 	beq.w	8003518 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d15e      	bne.n	80034d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341a:	4b09      	ldr	r3, [pc, #36]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a08      	ldr	r2, [pc, #32]	@ (8003440 <HAL_RCC_OscConfig+0x4b8>)
 8003420:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003426:	f7fe fbdd 	bl	8001be4 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800342c:	e00c      	b.n	8003448 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe fbd9 	bl	8001be4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d905      	bls.n	8003448 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e0ab      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
 8003440:	40021000 	.word	0x40021000
 8003444:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003448:	4b55      	ldr	r3, [pc, #340]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ec      	bne.n	800342e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003454:	4b52      	ldr	r3, [pc, #328]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	4b52      	ldr	r3, [pc, #328]	@ (80035a4 <HAL_RCC_OscConfig+0x61c>)
 800345a:	4013      	ands	r3, r2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6a11      	ldr	r1, [r2, #32]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003464:	3a01      	subs	r2, #1
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	4311      	orrs	r1, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800346e:	0212      	lsls	r2, r2, #8
 8003470:	4311      	orrs	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003476:	0852      	lsrs	r2, r2, #1
 8003478:	3a01      	subs	r2, #1
 800347a:	0552      	lsls	r2, r2, #21
 800347c:	4311      	orrs	r1, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003482:	0852      	lsrs	r2, r2, #1
 8003484:	3a01      	subs	r2, #1
 8003486:	0652      	lsls	r2, r2, #25
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800348e:	06d2      	lsls	r2, r2, #27
 8003490:	430a      	orrs	r2, r1
 8003492:	4943      	ldr	r1, [pc, #268]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 8003494:	4313      	orrs	r3, r2
 8003496:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003498:	4b41      	ldr	r3, [pc, #260]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a40      	ldr	r2, [pc, #256]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 800349e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034a4:	4b3e      	ldr	r3, [pc, #248]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a3d      	ldr	r2, [pc, #244]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 80034aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe fb98 	bl	8001be4 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b8:	f7fe fb94 	bl	8001be4 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e066      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ca:	4b35      	ldr	r3, [pc, #212]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x530>
 80034d6:	e05e      	b.n	8003596 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d8:	4b31      	ldr	r3, [pc, #196]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a30      	ldr	r2, [pc, #192]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 80034de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe fb7e 	bl	8001be4 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fe fb7a 	bl	8001be4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e04c      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fe:	4b28      	ldr	r3, [pc, #160]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800350a:	4b25      	ldr	r3, [pc, #148]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	4924      	ldr	r1, [pc, #144]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 8003510:	4b25      	ldr	r3, [pc, #148]	@ (80035a8 <HAL_RCC_OscConfig+0x620>)
 8003512:	4013      	ands	r3, r2
 8003514:	60cb      	str	r3, [r1, #12]
 8003516:	e03e      	b.n	8003596 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e039      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003524:	4b1e      	ldr	r3, [pc, #120]	@ (80035a0 <HAL_RCC_OscConfig+0x618>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 0203 	and.w	r2, r3, #3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	429a      	cmp	r2, r3
 8003536:	d12c      	bne.n	8003592 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	3b01      	subs	r3, #1
 8003544:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d123      	bne.n	8003592 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003554:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d11b      	bne.n	8003592 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003564:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d113      	bne.n	8003592 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	3b01      	subs	r3, #1
 8003578:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d109      	bne.n	8003592 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	3b01      	subs	r3, #1
 800358c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d001      	beq.n	8003596 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	019f800c 	.word	0x019f800c
 80035a8:	feeefffc 	.word	0xfeeefffc

080035ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e11e      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b91      	ldr	r3, [pc, #580]	@ (800380c <HAL_RCC_ClockConfig+0x260>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b8e      	ldr	r3, [pc, #568]	@ (800380c <HAL_RCC_ClockConfig+0x260>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 020f 	bic.w	r2, r3, #15
 80035da:	498c      	ldr	r1, [pc, #560]	@ (800380c <HAL_RCC_ClockConfig+0x260>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b8a      	ldr	r3, [pc, #552]	@ (800380c <HAL_RCC_ClockConfig+0x260>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e106      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d073      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d129      	bne.n	800365c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003608:	4b81      	ldr	r3, [pc, #516]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0f4      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003618:	f000 f99e 	bl	8003958 <RCC_GetSysClockFreqFromPLLSource>
 800361c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4a7c      	ldr	r2, [pc, #496]	@ (8003814 <HAL_RCC_ClockConfig+0x268>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d93f      	bls.n	80036a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003626:	4b7a      	ldr	r3, [pc, #488]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800363a:	2b00      	cmp	r3, #0
 800363c:	d033      	beq.n	80036a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003642:	2b00      	cmp	r3, #0
 8003644:	d12f      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003646:	4b72      	ldr	r3, [pc, #456]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800364e:	4a70      	ldr	r2, [pc, #448]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003654:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003656:	2380      	movs	r3, #128	@ 0x80
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	e024      	b.n	80036a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d107      	bne.n	8003674 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003664:	4b6a      	ldr	r3, [pc, #424]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0c6      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003674:	4b66      	ldr	r3, [pc, #408]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0be      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003684:	f000 f8ce 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 8003688:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4a61      	ldr	r2, [pc, #388]	@ (8003814 <HAL_RCC_ClockConfig+0x268>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d909      	bls.n	80036a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003692:	4b5f      	ldr	r3, [pc, #380]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800369a:	4a5d      	ldr	r2, [pc, #372]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 800369c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036a2:	2380      	movs	r3, #128	@ 0x80
 80036a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4957      	ldr	r1, [pc, #348]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fe fa94 	bl	8001be4 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7fe fa90 	bl	8001be4 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e095      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1eb      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d023      	beq.n	800373c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003700:	4b43      	ldr	r3, [pc, #268]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a42      	ldr	r2, [pc, #264]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003706:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800370a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003718:	4b3d      	ldr	r3, [pc, #244]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003720:	4a3b      	ldr	r2, [pc, #236]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003722:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003726:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003728:	4b39      	ldr	r3, [pc, #228]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4936      	ldr	r1, [pc, #216]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
 800373a:	e008      	b.n	800374e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b80      	cmp	r3, #128	@ 0x80
 8003740:	d105      	bne.n	800374e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003742:	4b33      	ldr	r3, [pc, #204]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4a32      	ldr	r2, [pc, #200]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 8003748:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800374c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800374e:	4b2f      	ldr	r3, [pc, #188]	@ (800380c <HAL_RCC_ClockConfig+0x260>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d21d      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375c:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <HAL_RCC_ClockConfig+0x260>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 020f 	bic.w	r2, r3, #15
 8003764:	4929      	ldr	r1, [pc, #164]	@ (800380c <HAL_RCC_ClockConfig+0x260>)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800376c:	f7fe fa3a 	bl	8001be4 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fe fa36 	bl	8001be4 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e03b      	b.n	8003802 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b20      	ldr	r3, [pc, #128]	@ (800380c <HAL_RCC_ClockConfig+0x260>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d1ed      	bne.n	8003774 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4917      	ldr	r1, [pc, #92]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037c2:	4b13      	ldr	r3, [pc, #76]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	490f      	ldr	r1, [pc, #60]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037d6:	f000 f825 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 80037da:	4602      	mov	r2, r0
 80037dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <HAL_RCC_ClockConfig+0x264>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	490c      	ldr	r1, [pc, #48]	@ (8003818 <HAL_RCC_ClockConfig+0x26c>)
 80037e8:	5ccb      	ldrb	r3, [r1, r3]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	fa22 f303 	lsr.w	r3, r2, r3
 80037f2:	4a0a      	ldr	r2, [pc, #40]	@ (800381c <HAL_RCC_ClockConfig+0x270>)
 80037f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003820 <HAL_RCC_ClockConfig+0x274>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe f9a6 	bl	8001b4c <HAL_InitTick>
 8003800:	4603      	mov	r3, r0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40022000 	.word	0x40022000
 8003810:	40021000 	.word	0x40021000
 8003814:	04c4b400 	.word	0x04c4b400
 8003818:	08004bcc 	.word	0x08004bcc
 800381c:	20000000 	.word	0x20000000
 8003820:	20000004 	.word	0x20000004

08003824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800382a:	4b2c      	ldr	r3, [pc, #176]	@ (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b04      	cmp	r3, #4
 8003834:	d102      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003836:	4b2a      	ldr	r3, [pc, #168]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	e047      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800383c:	4b27      	ldr	r3, [pc, #156]	@ (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d102      	bne.n	800384e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003848:	4b26      	ldr	r3, [pc, #152]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	e03e      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800384e:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d136      	bne.n	80038c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800385a:	4b20      	ldr	r3, [pc, #128]	@ (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003864:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	3301      	adds	r3, #1
 8003870:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d10c      	bne.n	8003892 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003878:	4a1a      	ldr	r2, [pc, #104]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003880:	4a16      	ldr	r2, [pc, #88]	@ (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003882:	68d2      	ldr	r2, [r2, #12]
 8003884:	0a12      	lsrs	r2, r2, #8
 8003886:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	617b      	str	r3, [r7, #20]
      break;
 8003890:	e00c      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003892:	4a13      	ldr	r2, [pc, #76]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	fbb2 f3f3 	udiv	r3, r2, r3
 800389a:	4a10      	ldr	r2, [pc, #64]	@ (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800389c:	68d2      	ldr	r2, [r2, #12]
 800389e:	0a12      	lsrs	r2, r2, #8
 80038a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	617b      	str	r3, [r7, #20]
      break;
 80038aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	0e5b      	lsrs	r3, r3, #25
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	3301      	adds	r3, #1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	e001      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038cc:	693b      	ldr	r3, [r7, #16]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	016e3600 	.word	0x016e3600

080038e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000000 	.word	0x20000000

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003904:	f7ff fff0 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4904      	ldr	r1, [pc, #16]	@ (8003928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	08004bdc 	.word	0x08004bdc

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003930:	f7ff ffda 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0adb      	lsrs	r3, r3, #11
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4904      	ldr	r1, [pc, #16]	@ (8003954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	08004bdc 	.word	0x08004bdc

08003958 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800395e:	4b1e      	ldr	r3, [pc, #120]	@ (80039d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003968:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	3301      	adds	r3, #1
 8003974:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d10c      	bne.n	8003996 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800397c:	4a17      	ldr	r2, [pc, #92]	@ (80039dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	4a14      	ldr	r2, [pc, #80]	@ (80039d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003986:	68d2      	ldr	r2, [r2, #12]
 8003988:	0a12      	lsrs	r2, r2, #8
 800398a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	617b      	str	r3, [r7, #20]
    break;
 8003994:	e00c      	b.n	80039b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003996:	4a12      	ldr	r2, [pc, #72]	@ (80039e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	4a0e      	ldr	r2, [pc, #56]	@ (80039d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	0a12      	lsrs	r2, r2, #8
 80039a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
    break;
 80039ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039b0:	4b09      	ldr	r3, [pc, #36]	@ (80039d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0e5b      	lsrs	r3, r3, #25
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	3301      	adds	r3, #1
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039ca:	687b      	ldr	r3, [r7, #4]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	40021000 	.word	0x40021000
 80039dc:	016e3600 	.word	0x016e3600
 80039e0:	00f42400 	.word	0x00f42400

080039e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039ec:	2300      	movs	r3, #0
 80039ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039f0:	2300      	movs	r3, #0
 80039f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8098 	beq.w	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a06:	4b43      	ldr	r3, [pc, #268]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10d      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	4b40      	ldr	r3, [pc, #256]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	4a3f      	ldr	r2, [pc, #252]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a39      	ldr	r2, [pc, #228]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3a:	f7fe f8d3 	bl	8001be4 <HAL_GetTick>
 8003a3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a40:	e009      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fe f8cf 	bl	8001be4 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d902      	bls.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	74fb      	strb	r3, [r7, #19]
        break;
 8003a54:	e005      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a56:	4b30      	ldr	r3, [pc, #192]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ef      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d159      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a68:	4b2a      	ldr	r3, [pc, #168]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01e      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d019      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a84:	4b23      	ldr	r3, [pc, #140]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a90:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a96:	4a1f      	ldr	r2, [pc, #124]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ab0:	4a18      	ldr	r2, [pc, #96]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d016      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac2:	f7fe f88f 	bl	8001be4 <HAL_GetTick>
 8003ac6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac8:	e00b      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fe f88b 	bl	8001be4 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d902      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	74fb      	strb	r3, [r7, #19]
            break;
 8003ae0:	e006      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ec      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af6:	4b07      	ldr	r3, [pc, #28]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b04:	4903      	ldr	r1, [pc, #12]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b0c:	e008      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	74bb      	strb	r3, [r7, #18]
 8003b12:	e005      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b20:	7c7b      	ldrb	r3, [r7, #17]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d105      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b26:	4ba7      	ldr	r3, [pc, #668]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	4aa6      	ldr	r2, [pc, #664]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b3e:	4ba1      	ldr	r3, [pc, #644]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b44:	f023 0203 	bic.w	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	499d      	ldr	r1, [pc, #628]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b60:	4b98      	ldr	r3, [pc, #608]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b66:	f023 020c 	bic.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	4995      	ldr	r1, [pc, #596]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b82:	4b90      	ldr	r3, [pc, #576]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	498c      	ldr	r1, [pc, #560]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ba4:	4b87      	ldr	r3, [pc, #540]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003baa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	4984      	ldr	r1, [pc, #528]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	497b      	ldr	r1, [pc, #492]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003be8:	4b76      	ldr	r3, [pc, #472]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	4973      	ldr	r1, [pc, #460]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c0a:	4b6e      	ldr	r3, [pc, #440]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	496a      	ldr	r1, [pc, #424]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c2c:	4b65      	ldr	r3, [pc, #404]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	4962      	ldr	r1, [pc, #392]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	4959      	ldr	r1, [pc, #356]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c70:	4b54      	ldr	r3, [pc, #336]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	4951      	ldr	r1, [pc, #324]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c92:	4b4c      	ldr	r3, [pc, #304]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	4948      	ldr	r1, [pc, #288]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb4:	4b43      	ldr	r3, [pc, #268]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	4940      	ldr	r1, [pc, #256]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a3a      	ldr	r2, [pc, #232]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cde:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d015      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cec:	4b35      	ldr	r3, [pc, #212]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfa:	4932      	ldr	r1, [pc, #200]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d24:	4b27      	ldr	r3, [pc, #156]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d32:	4924      	ldr	r1, [pc, #144]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d42:	d105      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d44:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d5c:	4b19      	ldr	r3, [pc, #100]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6a:	4916      	ldr	r1, [pc, #88]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7c:	4b11      	ldr	r3, [pc, #68]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a10      	ldr	r2, [pc, #64]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d019      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d94:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	4908      	ldr	r1, [pc, #32]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003db2:	d109      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db4:	4b03      	ldr	r3, [pc, #12]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a02      	ldr	r2, [pc, #8]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dbe:	60d3      	str	r3, [r2, #12]
 8003dc0:	e002      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dd4:	4b29      	ldr	r3, [pc, #164]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dda:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	4926      	ldr	r1, [pc, #152]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003df2:	d105      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003df4:	4b21      	ldr	r3, [pc, #132]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4a20      	ldr	r2, [pc, #128]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d015      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e12:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e1a:	4918      	ldr	r1, [pc, #96]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e2c:	4b13      	ldr	r3, [pc, #76]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a12      	ldr	r2, [pc, #72]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e36:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d015      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e44:	4b0d      	ldr	r3, [pc, #52]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e52:	490a      	ldr	r1, [pc, #40]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e62:	d105      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e64:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4a04      	ldr	r2, [pc, #16]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e70:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000

08003e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e042      	b.n	8003f18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fd f961 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2224      	movs	r2, #36	@ 0x24
 8003eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fb24 	bl	8004518 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f825 	bl	8003f20 <UART_SetConfig>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e01b      	b.n	8003f18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003eee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003efe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fba3 	bl	800465c <UART_CheckIdleState>
 8003f16:	4603      	mov	r3, r0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f24:	b08c      	sub	sp, #48	@ 0x30
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4baa      	ldr	r3, [pc, #680]	@ (80041f8 <UART_SetConfig+0x2d8>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a9f      	ldr	r2, [pc, #636]	@ (80041fc <UART_SetConfig+0x2dc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003f96:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003faa:	f023 010f 	bic.w	r1, r3, #15
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a90      	ldr	r2, [pc, #576]	@ (8004200 <UART_SetConfig+0x2e0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d125      	bne.n	8004010 <UART_SetConfig+0xf0>
 8003fc4:	4b8f      	ldr	r3, [pc, #572]	@ (8004204 <UART_SetConfig+0x2e4>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d81a      	bhi.n	8004008 <UART_SetConfig+0xe8>
 8003fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd8 <UART_SetConfig+0xb8>)
 8003fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	08003ff9 	.word	0x08003ff9
 8003fe0:	08003ff1 	.word	0x08003ff1
 8003fe4:	08004001 	.word	0x08004001
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fee:	e116      	b.n	800421e <UART_SetConfig+0x2fe>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ff6:	e112      	b.n	800421e <UART_SetConfig+0x2fe>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ffe:	e10e      	b.n	800421e <UART_SetConfig+0x2fe>
 8004000:	2308      	movs	r3, #8
 8004002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004006:	e10a      	b.n	800421e <UART_SetConfig+0x2fe>
 8004008:	2310      	movs	r3, #16
 800400a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800400e:	e106      	b.n	800421e <UART_SetConfig+0x2fe>
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a7c      	ldr	r2, [pc, #496]	@ (8004208 <UART_SetConfig+0x2e8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d138      	bne.n	800408c <UART_SetConfig+0x16c>
 800401a:	4b7a      	ldr	r3, [pc, #488]	@ (8004204 <UART_SetConfig+0x2e4>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004020:	f003 030c 	and.w	r3, r3, #12
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d82d      	bhi.n	8004084 <UART_SetConfig+0x164>
 8004028:	a201      	add	r2, pc, #4	@ (adr r2, 8004030 <UART_SetConfig+0x110>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004065 	.word	0x08004065
 8004034:	08004085 	.word	0x08004085
 8004038:	08004085 	.word	0x08004085
 800403c:	08004085 	.word	0x08004085
 8004040:	08004075 	.word	0x08004075
 8004044:	08004085 	.word	0x08004085
 8004048:	08004085 	.word	0x08004085
 800404c:	08004085 	.word	0x08004085
 8004050:	0800406d 	.word	0x0800406d
 8004054:	08004085 	.word	0x08004085
 8004058:	08004085 	.word	0x08004085
 800405c:	08004085 	.word	0x08004085
 8004060:	0800407d 	.word	0x0800407d
 8004064:	2300      	movs	r3, #0
 8004066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800406a:	e0d8      	b.n	800421e <UART_SetConfig+0x2fe>
 800406c:	2302      	movs	r3, #2
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004072:	e0d4      	b.n	800421e <UART_SetConfig+0x2fe>
 8004074:	2304      	movs	r3, #4
 8004076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800407a:	e0d0      	b.n	800421e <UART_SetConfig+0x2fe>
 800407c:	2308      	movs	r3, #8
 800407e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004082:	e0cc      	b.n	800421e <UART_SetConfig+0x2fe>
 8004084:	2310      	movs	r3, #16
 8004086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800408a:	e0c8      	b.n	800421e <UART_SetConfig+0x2fe>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a5e      	ldr	r2, [pc, #376]	@ (800420c <UART_SetConfig+0x2ec>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d125      	bne.n	80040e2 <UART_SetConfig+0x1c2>
 8004096:	4b5b      	ldr	r3, [pc, #364]	@ (8004204 <UART_SetConfig+0x2e4>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040a0:	2b30      	cmp	r3, #48	@ 0x30
 80040a2:	d016      	beq.n	80040d2 <UART_SetConfig+0x1b2>
 80040a4:	2b30      	cmp	r3, #48	@ 0x30
 80040a6:	d818      	bhi.n	80040da <UART_SetConfig+0x1ba>
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d00a      	beq.n	80040c2 <UART_SetConfig+0x1a2>
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d814      	bhi.n	80040da <UART_SetConfig+0x1ba>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <UART_SetConfig+0x19a>
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d008      	beq.n	80040ca <UART_SetConfig+0x1aa>
 80040b8:	e00f      	b.n	80040da <UART_SetConfig+0x1ba>
 80040ba:	2300      	movs	r3, #0
 80040bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040c0:	e0ad      	b.n	800421e <UART_SetConfig+0x2fe>
 80040c2:	2302      	movs	r3, #2
 80040c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040c8:	e0a9      	b.n	800421e <UART_SetConfig+0x2fe>
 80040ca:	2304      	movs	r3, #4
 80040cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040d0:	e0a5      	b.n	800421e <UART_SetConfig+0x2fe>
 80040d2:	2308      	movs	r3, #8
 80040d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040d8:	e0a1      	b.n	800421e <UART_SetConfig+0x2fe>
 80040da:	2310      	movs	r3, #16
 80040dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040e0:	e09d      	b.n	800421e <UART_SetConfig+0x2fe>
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004210 <UART_SetConfig+0x2f0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d125      	bne.n	8004138 <UART_SetConfig+0x218>
 80040ec:	4b45      	ldr	r3, [pc, #276]	@ (8004204 <UART_SetConfig+0x2e4>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80040f8:	d016      	beq.n	8004128 <UART_SetConfig+0x208>
 80040fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80040fc:	d818      	bhi.n	8004130 <UART_SetConfig+0x210>
 80040fe:	2b80      	cmp	r3, #128	@ 0x80
 8004100:	d00a      	beq.n	8004118 <UART_SetConfig+0x1f8>
 8004102:	2b80      	cmp	r3, #128	@ 0x80
 8004104:	d814      	bhi.n	8004130 <UART_SetConfig+0x210>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <UART_SetConfig+0x1f0>
 800410a:	2b40      	cmp	r3, #64	@ 0x40
 800410c:	d008      	beq.n	8004120 <UART_SetConfig+0x200>
 800410e:	e00f      	b.n	8004130 <UART_SetConfig+0x210>
 8004110:	2300      	movs	r3, #0
 8004112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004116:	e082      	b.n	800421e <UART_SetConfig+0x2fe>
 8004118:	2302      	movs	r3, #2
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800411e:	e07e      	b.n	800421e <UART_SetConfig+0x2fe>
 8004120:	2304      	movs	r3, #4
 8004122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004126:	e07a      	b.n	800421e <UART_SetConfig+0x2fe>
 8004128:	2308      	movs	r3, #8
 800412a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800412e:	e076      	b.n	800421e <UART_SetConfig+0x2fe>
 8004130:	2310      	movs	r3, #16
 8004132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004136:	e072      	b.n	800421e <UART_SetConfig+0x2fe>
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a35      	ldr	r2, [pc, #212]	@ (8004214 <UART_SetConfig+0x2f4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d12a      	bne.n	8004198 <UART_SetConfig+0x278>
 8004142:	4b30      	ldr	r3, [pc, #192]	@ (8004204 <UART_SetConfig+0x2e4>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800414c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004150:	d01a      	beq.n	8004188 <UART_SetConfig+0x268>
 8004152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004156:	d81b      	bhi.n	8004190 <UART_SetConfig+0x270>
 8004158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800415c:	d00c      	beq.n	8004178 <UART_SetConfig+0x258>
 800415e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004162:	d815      	bhi.n	8004190 <UART_SetConfig+0x270>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <UART_SetConfig+0x250>
 8004168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800416c:	d008      	beq.n	8004180 <UART_SetConfig+0x260>
 800416e:	e00f      	b.n	8004190 <UART_SetConfig+0x270>
 8004170:	2300      	movs	r3, #0
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004176:	e052      	b.n	800421e <UART_SetConfig+0x2fe>
 8004178:	2302      	movs	r3, #2
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800417e:	e04e      	b.n	800421e <UART_SetConfig+0x2fe>
 8004180:	2304      	movs	r3, #4
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004186:	e04a      	b.n	800421e <UART_SetConfig+0x2fe>
 8004188:	2308      	movs	r3, #8
 800418a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800418e:	e046      	b.n	800421e <UART_SetConfig+0x2fe>
 8004190:	2310      	movs	r3, #16
 8004192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004196:	e042      	b.n	800421e <UART_SetConfig+0x2fe>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a17      	ldr	r2, [pc, #92]	@ (80041fc <UART_SetConfig+0x2dc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d13a      	bne.n	8004218 <UART_SetConfig+0x2f8>
 80041a2:	4b18      	ldr	r3, [pc, #96]	@ (8004204 <UART_SetConfig+0x2e4>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80041ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041b0:	d01a      	beq.n	80041e8 <UART_SetConfig+0x2c8>
 80041b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041b6:	d81b      	bhi.n	80041f0 <UART_SetConfig+0x2d0>
 80041b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041bc:	d00c      	beq.n	80041d8 <UART_SetConfig+0x2b8>
 80041be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041c2:	d815      	bhi.n	80041f0 <UART_SetConfig+0x2d0>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <UART_SetConfig+0x2b0>
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041cc:	d008      	beq.n	80041e0 <UART_SetConfig+0x2c0>
 80041ce:	e00f      	b.n	80041f0 <UART_SetConfig+0x2d0>
 80041d0:	2300      	movs	r3, #0
 80041d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d6:	e022      	b.n	800421e <UART_SetConfig+0x2fe>
 80041d8:	2302      	movs	r3, #2
 80041da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041de:	e01e      	b.n	800421e <UART_SetConfig+0x2fe>
 80041e0:	2304      	movs	r3, #4
 80041e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041e6:	e01a      	b.n	800421e <UART_SetConfig+0x2fe>
 80041e8:	2308      	movs	r3, #8
 80041ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ee:	e016      	b.n	800421e <UART_SetConfig+0x2fe>
 80041f0:	2310      	movs	r3, #16
 80041f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041f6:	e012      	b.n	800421e <UART_SetConfig+0x2fe>
 80041f8:	cfff69f3 	.word	0xcfff69f3
 80041fc:	40008000 	.word	0x40008000
 8004200:	40013800 	.word	0x40013800
 8004204:	40021000 	.word	0x40021000
 8004208:	40004400 	.word	0x40004400
 800420c:	40004800 	.word	0x40004800
 8004210:	40004c00 	.word	0x40004c00
 8004214:	40005000 	.word	0x40005000
 8004218:	2310      	movs	r3, #16
 800421a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4aae      	ldr	r2, [pc, #696]	@ (80044dc <UART_SetConfig+0x5bc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	f040 8097 	bne.w	8004358 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800422a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800422e:	2b08      	cmp	r3, #8
 8004230:	d823      	bhi.n	800427a <UART_SetConfig+0x35a>
 8004232:	a201      	add	r2, pc, #4	@ (adr r2, 8004238 <UART_SetConfig+0x318>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800425d 	.word	0x0800425d
 800423c:	0800427b 	.word	0x0800427b
 8004240:	08004265 	.word	0x08004265
 8004244:	0800427b 	.word	0x0800427b
 8004248:	0800426b 	.word	0x0800426b
 800424c:	0800427b 	.word	0x0800427b
 8004250:	0800427b 	.word	0x0800427b
 8004254:	0800427b 	.word	0x0800427b
 8004258:	08004273 	.word	0x08004273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800425c:	f7ff fb50 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004260:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004262:	e010      	b.n	8004286 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004264:	4b9e      	ldr	r3, [pc, #632]	@ (80044e0 <UART_SetConfig+0x5c0>)
 8004266:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004268:	e00d      	b.n	8004286 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426a:	f7ff fadb 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 800426e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004270:	e009      	b.n	8004286 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004278:	e005      	b.n	8004286 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004284:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8130 	beq.w	80044ee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	4a94      	ldr	r2, [pc, #592]	@ (80044e4 <UART_SetConfig+0x5c4>)
 8004294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004298:	461a      	mov	r2, r3
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	fbb3 f3f2 	udiv	r3, r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4413      	add	r3, r2
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d305      	bcc.n	80042be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d903      	bls.n	80042c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80042c4:	e113      	b.n	80044ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	2200      	movs	r2, #0
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	60fa      	str	r2, [r7, #12]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	4a84      	ldr	r2, [pc, #528]	@ (80044e4 <UART_SetConfig+0x5c4>)
 80042d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2200      	movs	r2, #0
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042e8:	f7fc fbb4 	bl	8000a54 <__aeabi_uldivmod>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4610      	mov	r0, r2
 80042f2:	4619      	mov	r1, r3
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	020b      	lsls	r3, r1, #8
 80042fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004302:	0202      	lsls	r2, r0, #8
 8004304:	6979      	ldr	r1, [r7, #20]
 8004306:	6849      	ldr	r1, [r1, #4]
 8004308:	0849      	lsrs	r1, r1, #1
 800430a:	2000      	movs	r0, #0
 800430c:	460c      	mov	r4, r1
 800430e:	4605      	mov	r5, r0
 8004310:	eb12 0804 	adds.w	r8, r2, r4
 8004314:	eb43 0905 	adc.w	r9, r3, r5
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	469a      	mov	sl, r3
 8004320:	4693      	mov	fp, r2
 8004322:	4652      	mov	r2, sl
 8004324:	465b      	mov	r3, fp
 8004326:	4640      	mov	r0, r8
 8004328:	4649      	mov	r1, r9
 800432a:	f7fc fb93 	bl	8000a54 <__aeabi_uldivmod>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4613      	mov	r3, r2
 8004334:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800433c:	d308      	bcc.n	8004350 <UART_SetConfig+0x430>
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004344:	d204      	bcs.n	8004350 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6a3a      	ldr	r2, [r7, #32]
 800434c:	60da      	str	r2, [r3, #12]
 800434e:	e0ce      	b.n	80044ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004356:	e0ca      	b.n	80044ee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004360:	d166      	bne.n	8004430 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004362:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004366:	2b08      	cmp	r3, #8
 8004368:	d827      	bhi.n	80043ba <UART_SetConfig+0x49a>
 800436a:	a201      	add	r2, pc, #4	@ (adr r2, 8004370 <UART_SetConfig+0x450>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	08004395 	.word	0x08004395
 8004374:	0800439d 	.word	0x0800439d
 8004378:	080043a5 	.word	0x080043a5
 800437c:	080043bb 	.word	0x080043bb
 8004380:	080043ab 	.word	0x080043ab
 8004384:	080043bb 	.word	0x080043bb
 8004388:	080043bb 	.word	0x080043bb
 800438c:	080043bb 	.word	0x080043bb
 8004390:	080043b3 	.word	0x080043b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004394:	f7ff fab4 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004398:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800439a:	e014      	b.n	80043c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800439c:	f7ff fac6 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 80043a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043a2:	e010      	b.n	80043c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a4:	4b4e      	ldr	r3, [pc, #312]	@ (80044e0 <UART_SetConfig+0x5c0>)
 80043a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043a8:	e00d      	b.n	80043c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043aa:	f7ff fa3b 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 80043ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043b0:	e009      	b.n	80043c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043b8:	e005      	b.n	80043c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80043c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8090 	beq.w	80044ee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	4a44      	ldr	r2, [pc, #272]	@ (80044e4 <UART_SetConfig+0x5c4>)
 80043d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043d8:	461a      	mov	r2, r3
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80043e0:	005a      	lsls	r2, r3, #1
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	441a      	add	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	2b0f      	cmp	r3, #15
 80043f8:	d916      	bls.n	8004428 <UART_SetConfig+0x508>
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004400:	d212      	bcs.n	8004428 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f023 030f 	bic.w	r3, r3, #15
 800440a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	b29b      	uxth	r3, r3
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	b29a      	uxth	r2, r3
 8004418:	8bfb      	ldrh	r3, [r7, #30]
 800441a:	4313      	orrs	r3, r2
 800441c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	8bfa      	ldrh	r2, [r7, #30]
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	e062      	b.n	80044ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800442e:	e05e      	b.n	80044ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004430:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004434:	2b08      	cmp	r3, #8
 8004436:	d828      	bhi.n	800448a <UART_SetConfig+0x56a>
 8004438:	a201      	add	r2, pc, #4	@ (adr r2, 8004440 <UART_SetConfig+0x520>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	08004465 	.word	0x08004465
 8004444:	0800446d 	.word	0x0800446d
 8004448:	08004475 	.word	0x08004475
 800444c:	0800448b 	.word	0x0800448b
 8004450:	0800447b 	.word	0x0800447b
 8004454:	0800448b 	.word	0x0800448b
 8004458:	0800448b 	.word	0x0800448b
 800445c:	0800448b 	.word	0x0800448b
 8004460:	08004483 	.word	0x08004483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004464:	f7ff fa4c 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004468:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800446a:	e014      	b.n	8004496 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800446c:	f7ff fa5e 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8004470:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004472:	e010      	b.n	8004496 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004474:	4b1a      	ldr	r3, [pc, #104]	@ (80044e0 <UART_SetConfig+0x5c0>)
 8004476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004478:	e00d      	b.n	8004496 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447a:	f7ff f9d3 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 800447e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004480:	e009      	b.n	8004496 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004488:	e005      	b.n	8004496 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004494:	bf00      	nop
    }

    if (pclk != 0U)
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d028      	beq.n	80044ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	4a10      	ldr	r2, [pc, #64]	@ (80044e4 <UART_SetConfig+0x5c4>)
 80044a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044a6:	461a      	mov	r2, r3
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	441a      	add	r2, r3
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80044be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	2b0f      	cmp	r3, #15
 80044c4:	d910      	bls.n	80044e8 <UART_SetConfig+0x5c8>
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044cc:	d20c      	bcs.n	80044e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60da      	str	r2, [r3, #12]
 80044d8:	e009      	b.n	80044ee <UART_SetConfig+0x5ce>
 80044da:	bf00      	nop
 80044dc:	40008000 	.word	0x40008000
 80044e0:	00f42400 	.word	0x00f42400
 80044e4:	08004be4 	.word	0x08004be4
      }
      else
      {
        ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2200      	movs	r2, #0
 8004502:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2200      	movs	r2, #0
 8004508:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800450a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800450e:	4618      	mov	r0, r3
 8004510:	3730      	adds	r7, #48	@ 0x30
 8004512:	46bd      	mov	sp, r7
 8004514:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01a      	beq.n	800462e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004616:	d10a      	bne.n	800462e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
  }
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b098      	sub	sp, #96	@ 0x60
 8004660:	af02      	add	r7, sp, #8
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800466c:	f7fd faba 	bl	8001be4 <HAL_GetTick>
 8004670:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b08      	cmp	r3, #8
 800467e:	d12f      	bne.n	80046e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004680:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004688:	2200      	movs	r2, #0
 800468a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f88e 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d022      	beq.n	80046e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046c0:	e841 2300 	strex	r3, r2, [r1]
 80046c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e6      	bne.n	800469a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e063      	b.n	80047a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d149      	bne.n	8004782 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f6:	2200      	movs	r2, #0
 80046f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f857 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d03c      	beq.n	8004782 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	623b      	str	r3, [r7, #32]
   return(result);
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800471c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004726:	633b      	str	r3, [r7, #48]	@ 0x30
 8004728:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800472c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1e6      	bne.n	8004708 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3308      	adds	r3, #8
 8004740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	60fb      	str	r3, [r7, #12]
   return(result);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3308      	adds	r3, #8
 8004758:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800475a:	61fa      	str	r2, [r7, #28]
 800475c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	69b9      	ldr	r1, [r7, #24]
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	617b      	str	r3, [r7, #20]
   return(result);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e5      	bne.n	800473a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e012      	b.n	80047a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3758      	adds	r7, #88	@ 0x58
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c0:	e04f      	b.n	8004862 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c8:	d04b      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ca:	f7fd fa0b 	bl	8001be4 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e04e      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d037      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0xb2>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b80      	cmp	r3, #128	@ 0x80
 80047f6:	d034      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0xb2>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b40      	cmp	r3, #64	@ 0x40
 80047fc:	d031      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b08      	cmp	r3, #8
 800480a:	d110      	bne.n	800482e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2208      	movs	r2, #8
 8004812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f838 	bl	800488a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2208      	movs	r2, #8
 800481e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e029      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800483c:	d111      	bne.n	8004862 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f81e 	bl	800488a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e00f      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	429a      	cmp	r2, r3
 800487e:	d0a0      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800488a:	b480      	push	{r7}
 800488c:	b095      	sub	sp, #84	@ 0x54
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80048b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e6      	bne.n	8004892 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3308      	adds	r3, #8
 80048ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3308      	adds	r3, #8
 80048e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e3      	bne.n	80048c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d118      	bne.n	8004936 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	60bb      	str	r3, [r7, #8]
   return(result);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f023 0310 	bic.w	r3, r3, #16
 8004918:	647b      	str	r3, [r7, #68]	@ 0x44
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6979      	ldr	r1, [r7, #20]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	613b      	str	r3, [r7, #16]
   return(result);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e6      	bne.n	8004904 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800494a:	bf00      	nop
 800494c:	3754      	adds	r7, #84	@ 0x54
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_UARTEx_DisableFifoMode+0x16>
 8004968:	2302      	movs	r3, #2
 800496a:	e027      	b.n	80049bc <HAL_UARTEx_DisableFifoMode+0x66>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2224      	movs	r2, #36	@ 0x24
 8004978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800499a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049dc:	2302      	movs	r3, #2
 80049de:	e02d      	b.n	8004a3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2224      	movs	r2, #36	@ 0x24
 80049ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f84f 	bl	8004ac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e02d      	b.n	8004ab8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2224      	movs	r2, #36	@ 0x24
 8004a68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f811 	bl	8004ac0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d108      	bne.n	8004ae2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ae0:	e031      	b.n	8004b46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ae2:	2308      	movs	r3, #8
 8004ae4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	0e5b      	lsrs	r3, r3, #25
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	0f5b      	lsrs	r3, r3, #29
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b0a:	7bbb      	ldrb	r3, [r7, #14]
 8004b0c:	7b3a      	ldrb	r2, [r7, #12]
 8004b0e:	4911      	ldr	r1, [pc, #68]	@ (8004b54 <UARTEx_SetNbDataToProcess+0x94>)
 8004b10:	5c8a      	ldrb	r2, [r1, r2]
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b16:	7b3a      	ldrb	r2, [r7, #12]
 8004b18:	490f      	ldr	r1, [pc, #60]	@ (8004b58 <UARTEx_SetNbDataToProcess+0x98>)
 8004b1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	7b7a      	ldrb	r2, [r7, #13]
 8004b2c:	4909      	ldr	r1, [pc, #36]	@ (8004b54 <UARTEx_SetNbDataToProcess+0x94>)
 8004b2e:	5c8a      	ldrb	r2, [r1, r2]
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b34:	7b7a      	ldrb	r2, [r7, #13]
 8004b36:	4908      	ldr	r1, [pc, #32]	@ (8004b58 <UARTEx_SetNbDataToProcess+0x98>)
 8004b38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	08004bfc 	.word	0x08004bfc
 8004b58:	08004c04 	.word	0x08004c04

08004b5c <memset>:
 8004b5c:	4402      	add	r2, r0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d100      	bne.n	8004b66 <memset+0xa>
 8004b64:	4770      	bx	lr
 8004b66:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6a:	e7f9      	b.n	8004b60 <memset+0x4>

08004b6c <__libc_init_array>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ba4 <__libc_init_array+0x38>)
 8004b70:	4c0d      	ldr	r4, [pc, #52]	@ (8004ba8 <__libc_init_array+0x3c>)
 8004b72:	1b64      	subs	r4, r4, r5
 8004b74:	10a4      	asrs	r4, r4, #2
 8004b76:	2600      	movs	r6, #0
 8004b78:	42a6      	cmp	r6, r4
 8004b7a:	d109      	bne.n	8004b90 <__libc_init_array+0x24>
 8004b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8004bac <__libc_init_array+0x40>)
 8004b7e:	4c0c      	ldr	r4, [pc, #48]	@ (8004bb0 <__libc_init_array+0x44>)
 8004b80:	f000 f818 	bl	8004bb4 <_init>
 8004b84:	1b64      	subs	r4, r4, r5
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	2600      	movs	r6, #0
 8004b8a:	42a6      	cmp	r6, r4
 8004b8c:	d105      	bne.n	8004b9a <__libc_init_array+0x2e>
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
 8004b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b94:	4798      	blx	r3
 8004b96:	3601      	adds	r6, #1
 8004b98:	e7ee      	b.n	8004b78 <__libc_init_array+0xc>
 8004b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9e:	4798      	blx	r3
 8004ba0:	3601      	adds	r6, #1
 8004ba2:	e7f2      	b.n	8004b8a <__libc_init_array+0x1e>
 8004ba4:	08004c14 	.word	0x08004c14
 8004ba8:	08004c14 	.word	0x08004c14
 8004bac:	08004c14 	.word	0x08004c14
 8004bb0:	08004c18 	.word	0x08004c18

08004bb4 <_init>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr

08004bc0 <_fini>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	bf00      	nop
 8004bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc6:	bc08      	pop	{r3}
 8004bc8:	469e      	mov	lr, r3
 8004bca:	4770      	bx	lr
